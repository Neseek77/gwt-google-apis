#summary Using Google Maps in a GWT project

= Getting Started with Google Maps =

The Google Maps API provides a convenient JavaScript API which allows you to add mapping functionality to your application. The [http://code.google.com/p/gwt-google-apis Google Maps library for GWT] allows you to access this JavaScript API from Java code compiled with the GWT compiler.

This guide describes the basics of getting the Google Maps Library working in a GWT project. For more information on the functionality provided by the API itself, see the [http://code.google.com/apis/maps/ Google Maps API] developer's guide.


== Assumptions ==
 
  * You are already familiar with [http://code.google.com/webtoolkit/overview.html Google Web Toolkit]
  * You know how to [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(GettingStartedCreateProject) create a new GWT project] and import it into the Eclipse IDE environment using the `projectCreator` and `applicationCreator` tools


== Downloading the Google Maps Library for GWT ==

You can download the latest release of the library from the [http://code.google.com/p/gwt-google-apis/downloads/ project download page]. After you download the distribution, uncompress it.  Inside the folder you will find a .jar file named `gwt-maps.jar`. 

You can either reference the `.jar` file from the folder that you uncompressed the project in, or copy it to another location, such as the location of your GWT distribution (containing `gwt-dev-<machine>.jar` and `gwt-user.jar` files).  In this example, we've chosen to copy the file to the path `/usr/local/gwt-maps`.  If you are using Windows, you might choose to copy these files to a path like `C:\gwt\gwt-maps`

== Creating a new GWT Project ==

Start by creating a new GWT project called !SimpleMaps as described in the [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(GettingStarted) GWT Getting Started Guide]. 

Since we are working with an additional library, we use the command line argument `-addToClassPath` which adds the library `/usr/local/gwt-maps/gwt-maps.jar` to the Java classpath for the launch, compile and and eclipse definitions. For the purposes of this example we assume `gwt-maps.jar` has been unpacked in `/usr/local/gwt-maps` and that you are using the Eclipse IDE.

We also need to tell the GWT compiler that we are using the Maps module. To do this, we use the command line argument `-addToModule` and specify `com.google.gwt.maps.GoogleMaps` as the module to be inherited. This will place the inheritance entry `Maps.gwt.xml` into the generated project file `SimpleMaps.gwt.xml`.


{{{
$PP_OFF
$ projectCreator -eclipse SimpleMaps -out SimpleMaps \
     -addToClassPath /usr/local/gwt-maps/gwt-maps.jar

$ applicationCreator -eclipse SimpleMaps -out SimpleMaps \
		     -addToClassPath /usr/local/gwt-maps/gwt-maps.jar \
		     -addModule com.google.gwt.maps.GoogleMaps \
		     com.example.google.gwt.mapstutorial.client.SimpleMaps
}}}


Now you should now have a standard project set up. Before continuing, make sure you can launch the skeleton project in hosted mode by running _!SimpleMaps-shell_ from the command line. 

Also test out compilation with the `SimpleMaps-compile` script or the _Compile/Browse_ button in hosted mode.

{{{
$PP_OFF
$ ./SimpleMaps-compile
Compiling into ./www/com.example.google.gwt.mapstutorial.SimpleMaps
Copying all files found on public path
Compilation succeeded
}}}

If you are using the Eclipse IDE, now would be a good time to import your new project into Eclipse using the `File --> Import...` command.

==Adding the Maps script tag to your module XML file==

Your GWT application will need access to the Maps API, as well as the API key. In order to do this, you must include a <script> tag in your module's `SimpleMaps.gwt.xml` file. Include the script tag shown in your module.xml file above the automatically generated stylesheet reference.


{{{
 <!-- Load the Google Maps GWT bindings from the gwt-google-apis project -->
 <!-- Added by projectCreator if you use the -addModule argument -->
 <inherits name="com.google.gwt.maps.GoogleMaps" />

 <!--
    If you want to deploy this application outside of localhost,
    you must obtain a Google Maps API key at:
    http://www.google.com/apis/maps/signup.html
    Replace the src attribute below with a URL that contains your key.
  -->
 <!-- script src="http://maps.google.com/maps?gwt=1&amp;file=api&amp;v=2&amp;key=???" /-->

 <!-- You can usually run under localhost without a key                           -->
 <!-- Set the 'sensor' parameter to true if your app makes use of an onboard
      positioning sensor, such as a GPS reciever.
   -->
 <script src="http://maps.google.com/maps?gwt=1&amp;file=api&amp;v=2&amp;sensor=false" />

}}}

Note that in order to use the Maps API, you need to apply for a Google Maps API key.  Running with no key specified will work with `localhost` for development purposes, but you will need to apply for your own key to deploy to a website.


== Update the HTML host file ==

Replace the body of the HTML host file `src/com/example/google/gwt/mapstutorial/public/SimpleMaps.html` with a `<div>` tag that we can use for the GWT application.

{{{
<body>

    <h1>SimpleMaps</h1>

    <div id="mapsTutorial"></div>

</body>
}}}

== Add a map object to .java source ==

To complete the `src/com/example/google/gwt/mapstutorial/client/SimpleMaps.java` file, add some imports, a member to store a `MapWidget` instance, and replace the body of the `onModuleLoad()` method. 

{{{
package com.example.google.gwt.mapstutorial.client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.maps.client.InfoWindowContent;
import com.google.gwt.maps.client.MapWidget;
import com.google.gwt.maps.client.control.LargeMapControl;
import com.google.gwt.maps.client.geom.LatLng;
import com.google.gwt.maps.client.overlay.Marker;
import com.google.gwt.user.client.ui.RootPanel;

public class SimpleMaps implements EntryPoint {
  private MapWidget map;

  // GWT module entry point method.
  public void onModuleLoad() {
    LatLng cawkerCity = LatLng.newInstance(39.509,-98.434);
    // Open a map centered on Cawker City, KS USA

    map = new MapWidget(cawkerCity, 2);
    map.setSize("500px", "300px");
    
    // Add some controls for the zoom level
    map.addControl(new LargeMapControl());
    
    // Add a marker
    map.addOverlay(new Marker(cawkerCity));

    // Add an info window to highlight a point of interest
    map.getInfoWindow().open(map.getCenter(), 
        new InfoWindowContent("World's Largest Ball of Sisal Twine"));
    
    // Add the map to the HTML host page
    RootPanel.get("mapsTutorial").add(map);
  }
}
}}}


== Run the !SimpleMaps sample project ==

Now you should be able to execute your sample project in hosted mode by either running _!SimpleMaps-shell_ from the command line or using the _Run_ configuration from Eclipse.  

  http://gwt-google-apis.googlecode.com/svn/wiki/GettingStartedBasic5.png

If you would like to see your project in your host's web browser (web mode), press the _Compile/Browse_ button in hosted mode.