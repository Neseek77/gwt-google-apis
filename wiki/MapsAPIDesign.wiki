#summary Maps API Design

= Goals =
  * Create a Java binding for the Google Maps !JavaScript API
  * The Java API should be easy to use and hard to use incorrectly
= Non-Goals =
  * Completely reinvent the API for Java; the main concepts will remain the same thought the presentation may differ
= Use Cases =
The following use cases demonstrate how the Java API will expose the capabilities of the !JavaScript API.  For more details on each of the use cases, see  [http://www.google.com/apis/maps/documentation/index.html#Examples Maps API Examples].
== Create a !MapWidget ==
{{{
  LatLng mapCenter = new LatLng(33.781466, -84.387519);
  MapWidget map = new MapWidget(mapCenter, 13);
  RootPanel rootPanel = RootPanel.get();
  rootPanel.add(map);
}}}
== Map Movement and Animation ==
{{{
  map.setCenter(start);
    new Timer() {
      public void run() {
        map.panTo(end);
      }
    }.schedule(1000);
}}}
== Adding Controls to the Map ==
{{{
  MapWidget map = new MapWidget(...);
  map.addControl(new SmallMapControl());
  map.addControl(new MapTypeControl());
}}}
== Opening an Info Window ==
{{{
  InfoWindow info = map.getInfoWindow();
  info.open(map.getCenter(), new InfoWindowContent("Hello"));
}}}
== Map Overlays ==
{{{
    map.clearOverlays();

    // Add markers on the map
    for (int i = 0; i < 10; i++) {
      LatLng point = new LatLng(...);
      map.addOverlay(new Marker(point));
    }

    // Initialize an array of points
    LatLng[] points = new LatLng[5];
    for (int i = 0; i < 5; i++) {
      points[i] = new LatLng(...);
    }

    map.addOverlay(new Polyline(points));
}}}
== Click Handling ==
{{{
    map = new MapWidget(...);

    map.addClickListener(new MapClickListener() {
      public void onClick(MapWidget sender, Overlay overlay, LatLng point) {
        if (overlay != null && overlay instanceof Marker) {
          map.removeOverlay(overlay);
        } else {
          map.addOverlay(new Marker(point));
        }
      }
    });
}}} 
== Display Info Windows Above Markers ==
== Tabbed Info Windows ==
{{{
    InfoWindowTab[] infoTabs = new InfoWindowTab[] {
        new InfoWindowTab("Tab #1", "This is tab #1 content"),
        new InfoWindowTab("Tab #2", "This is tab #2 content")};
    content = new InfoWindowContent(infoTabs);

    // Place a marker in the center of the map and open the info window
    // automatically
    marker = new Marker(map.getCenter());
    marker.addClickListener(new MarkerClickListener() {
      public void onClick(Marker sender) {
        InfoWindow info = map.getInfoWindow();
        info.open(marker, content);
      }

      public void onDoubleClick(Marker sender) {
      }
    });
    map.addOverlay(marker);
}}}
== Creating Icons ==
{{{
    // Create our "tiny" marker icon
    Icon icon = new Icon(
        "http://labs.google.com/ridefinder/images/mm_20_red.png");

    // configure icon size, anchor, etc

    // Add markers to the map
    MarkerOptions options = new MarkerOptions();
    options.setIcon(icon);
    for (int i = 0; i < 10; i++) {
      LatLng point = new LatLng(...);
      map.addOverlay(new Marker(point, options));
    }
}}}
== Using Icon Classes (?) ==
== Draggable Markers ==
{{{
    MarkerOptions options = new MarkerOptions();
    options.setDraggable(true);
    Marker marker = new Marker(map.getCenter(), options);
    InfoWindow info = map.getInfoWindow();

    marker.addDragListener(new DragListener() {
      boolean created = false;

      public void onDrag() {
      }

      public void onDragEnd() {
        if (created) {
          info.setVisible(true);
        } else {
          info.open(marker, new InfoWindowContent("Just bouncing along..."));
        }
      }

      public void onDragStart() {
        info.setVisible(false);
      }
    });
    map.addOverlay(marker);
}}}
== Encoded Polylines == 
== Custom Map Conrols ==
{{{
  public class MyCustomControl extends CustomControl {
    public MyCustomControl() {
      super(new ControlPosition(ControlPosition.TOP_LEFT, 7, 7));
    }

    protected Widget initialize(final MapWidget map) {
      Panel container = new FlowPanel();
      // Add items to the FlowPanel
      return container;
    }
  }
}}}
== Custom Overlays ==
{{{
  public class MyOverlay extends Overlay {
    protected Overlay copy() {
    }

    protected void initialize(MapWidget map) {
    }

    protected void redraw(boolean force) {
    }

    protected void remove() {
    }
  }
}}}
== KML/GeoRSS Overlays ==
{{{
  GeoXmlOverlay geoXml = new GeoXmlOverlay("http://mapgadgets.googlepages.com/cta.kml");
  map.addOverlay(geoXml);
}}}
== Traffic Overlays ==
{{{
  TrafficOverlay trafficOverlay = new TrafficOverlay();
  map.addOverlay(trafficOverlay);
}}}
== Directions ==
{{{
    DirectionsPanel directionsPanel = new DirectionsPanel();
    
    // Add the directions panel to some container

    // Configure the DirectionQueryOptions
    DirectionQueryOptions opts = new DirectionQueryOptions(map, directionsPanel);
    
    // Load the directions
    Directions.load("500 Memorial Drive, Cambridge, MA to Fenway Park, Boston, MA", opts);
}}}
== Geocoder ==
{{{
  Geocoder geocoder = new Geocoder();
  geocoder.getLatLng("1600 Amphitheatre Pky, Mountain View, CA", new LatLngCallback() {
      public void onFailure() {
        // Failure handler
      }

      public void onSuccess(LatLng point) {
        // point is the LatLng for the requested address
      }
    });
}}}
== Marker Manager ==
{{{
  MarkerManger markerManager = new MarkerManager(map);
  markerManger.addMarker(...);
}}}




















