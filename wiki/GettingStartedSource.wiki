#summary Adding a Google API component to a GWT Project using the gwt-google-apis source code.

== Adding Google APIs to a GWT Project from source ==

This section describes how to integrate your project with the GWT Google APIs project using a checkout of the subversion repository.

If this is your first time setting up a project, you should work through the [GettingStartedBasic basic Getting Started] instructions.  These additional instructions are provided for those that intend to be a contributor to one of the `gwt-google-apis` projects, or need to use the very latest release of the API before a public release.

=== Getting the GWT Google APIs source ===

Downloading the latest source code requires the use of a
[http://subversion.tigris.org/ Subversion] client.  The Subversion
website contains command line clients for most operating systems.
Also, some IDEs can access a subversion repository natively or with a
plugin.  You can also find open source and commercial Subversion
clients on the web.

To get started, point your client at the GWT Google APIs subversion repository  [http://code.google.com/p/gwt-google-apis/source subversion repository] and check out a copy of the project into a directory.

The following example shows a checkout using the command line client on Linux:

{{{
$PP_OFF
 $ mkdir /usr/local/gwt-google-apis
 $ cd /usr/local/gwt-google-apis/
 $ svn checkout http://gwt-google-apis.googlecode.com/svn/trunk/ .
 A    ajaxsearch/distro-source
 A    ajaxsearch-apis/distro-source/common.ant.xml
 A    ajaxsearch/distro-source/core
 A    ajaxsearch/distro-source/core/src
 ...
Checked out revision 330.
}}}

Remember the path where you performed the checkout.  This documentation will refer to this path as _GWT_GOOGLE_APIS_DIR_.


=== Updating <project>-compile and <project>-shell ===

{{{
$PP_OFF
$  projectCreator -eclipse MapsTutorial -out MapsTutorial
Created directory MapsTutorial/src
Created directory MapsTutorial/test
Created file MapsTutorial/.project
Created file MapsTutorial/.classpath

$ applicationCreator -eclipse MapsTutorial -out MapsTutorial com.example.google.gwt.mapstutorial.client.MapsTutorial
Created directory MapsTutorial/src/com/example/google/gwt/mapstutorial
Created directory MapsTutorial/src/com/example/google/gwt/mapstutorial/client
Created directory MapsTutorial/src/com/example/google/gwt/mapstutorial/public
Created file MapsTutorial/src/com/example/google/gwt/mapstutorial/MapsTutorial.gwt.xml
Created file MapsTutorial/src/com/example/google/gwt/mapstutorial/public/MapsTutorial.html
Created file MapsTutorial/src/com/example/google/gwt/mapstutorial/client/MapsTutorial.java
Created file MapsTutorial/MapsTutorial.launch
Created file MapsTutorial/MapsTutorial-shell
Created file MapsTutorial/MapsTutorial-compile
}}}

The GWT compiler uses the Java sources, not compiled classes, and expects to find them on the Java class path, so we have to add the checkout source directory to the Java classpath.  In our example, we checked out the `trunk` directory of the GWT Google APIs project into:

`/usr/local/gwt-google-apis`

First, let's modify the command line script `MapsTutorial-shell` and append the source directory to the `-cp` argument to `java`:

{{{
$PP_OFF
#!/bin/sh
APPDIR=`dirname $0`;
java  -cp "$APPDIR/src:$APPDIR/bin:/usr/local/gwt/gwt-user.jar:/usr/local/gwt/gwt-dev-linux.jar:/usr/local/gwt-google-apis/maps/maps/src" com.google.gwt.dev.GWTShell -out "$APPDIR/www" "$@" com.example.google.gwt.mapstutorial.MapsTutorial/MapsTutorial.html;    
}}}

Next, make a similar change to the `MapsTutorial-compile` script:

{{{
$PP_OFF
#!/bin/sh
APPDIR=`dirname $0`;
java  -cp "$APPDIR/src:$APPDIR/bin:/usr/local/gwt/gwt-user.jar:/usr/local/gwt/gwt-dev-linux.jar:/usr/local/gwt-google-apis/maps/maps/src" com.google.gwt.dev.GWTCompiler -out "$APPDIR/www" "$@" com.example.google.gwt.mapstutorial.MapsTutorial;
}}}

Finally, we need to update the module to include the Maps project module file and the Google Maps API script.  Edit `MapsTutorial/src/com/example/google/gwt/mapstutorial/MapsTutorial.gwt.xml` and add the following lines:

{{{
 <!-- Load the Google Maps GWT bindings from the gwt-google-apis project -->
 <inherits name="com.google.gwt.maps.GoogleMaps" />

 <!--
    If you want to deploy this application outside of localhost,
    you must obtain a Google Maps API key at:
    http://www.google.com/apis/maps/signup.html
    Replace the src attribute below with a URL that contains your key.
  -->
 <script src="http://maps.google.com/maps?file=api&amp;v=2.x&amp;key=???" />
}}}

Test to see that hosted mode and web mode work by running the `MapsTutorial-shell` and `MapsTutorial-compile` scripts.

=== Import the Eclipse project from the GWT Google APIs source code ===

  1 Choose _File->Import..._ from the menu bar.
  1 Select _General->Existing Projects into Workspace_
  1 Browse from _Select root directory_ to the path you checked out from subversion (_GWT_GOOGLE_APIS_DIR_`/maps/eclipse` or `/usr/local/gwt/gwt-google-apis/maps/eclipse` in our example.)
  1 You should see a project named `gwt-maps` on the list.  Make sure it is selected.
  1 Choose _Finish_ to import the project.

You may need to fixup the project's build path.  

  1 Make sure the `gwt-maps` project is open and selected in the tree on the left.
  1 Navigate to  _Project->Properties...->Java Build Path->Libraries_
  1 Add the `gwt-dev-<arch>.jar` and `gwt-user.jar` libraries to the _Libraries_ tab.
  1 Alternatively, if you have imported the GWT source projects, add the gwt-dev-<arch> and gwt-user projects to the _Projects_ tab.

=== Updating Eclipse Build and Launch Configuration ===

If you are using the Eclipse IDE and created your project with `applicationCreator -eclipse`, then you will have a `.project` file and a `MapsTutorial.launch` file in the root of your project.  

Import the !MapsTutorial project into eclipse using the _File->Import..._ command.

After you successfully import the project, you first need to update the !MapsTutorial build configuration.

  1 Make sure your new project is open and select your project in the tree on the left.
  1 Navigate to  _Project->Properties...
  1 Select _Java Build Path_ in the tree on the left
  1 Open the _Projects_ tab.
  1 Add the project `gwt-maps`.

Next, update the launch configuration.  This will will allow you to launch hosted mode from Eclipse's `Run Dialog...` menu option.  

 1 Make sure your new project is open. 
 1 Navigate to  _Run->Open Run Dialog..._
 1 In the Run Dialog, open the _Java Application_ branch in the tree on the left
 1 Select your project name (`MapsTutorial` in our example.)
 1 Open the Classpath tab.  Select the _User Entries_ item in the tree.
 1 Click the _Advanced..._ button.
 1 Select _Add Folders_ and _OK_.  
 1 When the file browser appears, select the directory `src` from the `gwt-maps` project you created previously.  
 1 Use the _Up_ and _Down_ button to move the _src_ folders to the top of the _User Entries_ list.  Make sure that the _!MapsTutorial (default classpath)_ is at the bottom of the list.

  http://gwt-google-apis.googlecode.com/svn/wiki/GettingStartedBasic4.png


Now you are ready to build a project!