#summary Using Google AJAX Search in a project

= Getting Started with Google AJAX Search =

The AJAX Search API provides a convenient way to add a pre-packaged search box and display results to a webpage, or to manipulate search results in a programmatic way. The [http://code.google.com/p/gwt-google-apis Google AJAX Search library for GWT] allows you to access the JavaScript API from Java code compiled with the GWT compiler.

This guide describes the basics behind writing a small project that uses the Google AJAX Search library with [http://code.google.com/p/google-web-toolkit Google Web Toolkit] (GWT).  Before working through this guide, it would be helpful to become familiar with the [http://code.google.com/apis/ajaxsearch/ Google AJAX Search API] developer's site.


== Assumptions ==
 
  * You are already familiar with [http://code.google.com/webtoolkit/overview.html Google Web Toolkit]
  * You know how to [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(GettingStartedCreateProject) create a new GWT project] and import it into the Eclipse IDE environment using the `projectCreator` and `applicationCreator` tools


== Downloading the Google AJAX Search Library for GWT ==

You can download the latest production release of the library from the [http://code.google.com/p/gwt-google-apis/downloads/ project download page]. After you download the distribution, uncompress it.  Inside the folder you will find a .jar file named `gwt-search.jar`. 

You can either reference the `.jar` file from the folder that you uncompressed the project in, or copy it to another location, such as the location of your GWT distribution (containing `gwt-dev-`_<machine>_`.jar` and `gwt-user.jar` files).  In this example, we've chosen to copy the file to the path `/usr/local/gwt-search`.

== Creating a new GWT Project ==

Start by creating a new GWT project called !SimpleSearch as described in the [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(GettingStarted) GWT Getting Started Guide]. 

Since we are working with an additional library, we use the command line argument `-addToClassPath` which adds the library `/usr/local/gwt-gears/gwt-search.jar` to the Java classpath for the launch, compile and and eclipse definitions. For the purposes of this example we assume `gwt-search.jar` has been unpacked in `/usr/local/gwt-search` and that you are using the Eclipse IDE.

We also need to tell the GWT compiler that we are using the Search module. To do this, we use the command line argument `-addToModule` and specify `com.google.gwt.search.Search` as the module to be inherited. This will place the inheritance entry `Search.gwt.xml` into the generated project file `SimpleSearch.gwt.xml`.


{{{
$PP_OFF
$ projectCreator -eclipse SimpleSearch -out SimpleSearch \
     -addToClassPath /usr/local/gwt-search/gwt-search.jar

$ applicationCreator -eclipse SimpleSearch -out SimpleSearch \
     -addToClassPath /usr/local/gwt-search/gwt-search.jar \
     -addModule com.google.gwt.search.Search com.example.simplesearch.client.SimpleSearch
}}}


Now you should now have a standard project set up. Before continuing, make sure you can launch the skeleton project in hosted mode by either running _!SimpleSearch-shell_ from the command line or using the _Run_ configuration from Eclipse. 

Also test out compilation with the `SimpleSearch-compile` script or the _Compile/Browse_ button in hosted mode

{{{
$PP_OFF
$ ./SimpleSearch-compile
Compiling module com.example.simplesearch.SimpleSearch
Compilation succeeded
Linking compilation into ./www/com.example.simplesearch.SimpleSearch
}}}

If you are using the Eclipse IDE, now would be a good time to import your new project into Eclipse using the `File --> Import...` command.

==Add the AJAX Search script tag to your module XML file==

Your GWT application will need access to the AJAX Search API, as well as the API key. In order to do this, you must include a <script> tag in your module's `SimpleSearch.gwt.xml` file. Include that line above the automatically generated stylesheet reference.

{{{
    <!--
      If you want to deploy this application outside of localhost,
      you must obtain a Google AJAX Search API key at:
        http://code.google.com/apis/search/signup.html
      append &amp;key=ABC to the string below, replacing ABC with the key
      obtained from the site above.
     -->
    <script src="http://www.google.com/uds/api?file=uds.js&amp;v=1.0&amp;gwt=1"/>

    <!-- Specify the application specific style sheet. -->
    <stylesheet src='SimpleSearch.css' />   
}}}

When you go to deploy your application outside of localhost, you will need to obtain a Google AJAX Search API key at [http://code.google.com/apis/search/signup.html]. When you do, replace the string `ABC` in the src attribute below with the key obtained from the site above.

== Basic steps to use the API ==

Now that your project is set up, the basic steps to use the API are as follows:

  1 Create one or more search objects
     * [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/BlogSearch.html BlogSearch]
     * [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/BookSearch.html BookSearch]
     * [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/LocalSearch.html LocalSearch]
     * [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/ImageSearch.html ImageSearch]
     * [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/NewsSearch.html NewsSearch]
     * [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/VideoSearch.html VideoSearch]
     * [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/WebSearch.html WebSearch]
  1 Add the search object(s) to a [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/SearchControlOptions.html SearchControlOptions] object
  1 Optionally register a [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/SearchListener.html SearchListener] on the !SearchControlOptions object
  1 Create a [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/SearchControl.html SearchControl] object from the `SearchControlOptions`
  1 Call the [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/SearchControl.html#execute(/java/lang/String)execute SearchControl.execute()] method to specify a search term and start the search .

We'll do just that in the next step. 

== Adding a Google AJAX !SearchControl to the page ==

Now that you've seen the general steps to use the API, we'll put them into practice to generate a nicely formatted search box and results using web and image results. Here we use the API's built in HTML rendering.

Replace the contents of your `onModuleLoad` method with the following:

{{{
public class SimpleSearch implements EntryPoint {

  public void onModuleLoad() {

    SearchControlOptions options = new SearchControlOptions();
    WebSearch webSearch = new WebSearch();
    webSearch.setResultSetSize(ResultSetSize.LARGE);
    options.add(webSearch);
    ImageSearch imageSearch = new ImageSearch();
    options.add(imageSearch, ExpandMode.OPEN);
    final SearchControl control = new SearchControl(options);
    control.execute("treehouse");
    RootPanel.get().add(control);
  }
}
}}}

Now save your project and run it in hosted mode. 

Congratulations! You should now have Google AJAX Search working within a GWT application. 

  [http://gwt-google-apis.googlecode.com/svn/wiki/AJAXSearch2.png]


== Using a !SearchControl with a !SearchCompleteHandler ==

The Search API is not limited to showing results in just the format above. By registering a  [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/com/google/gwt/search/client/SearchCompleteListener SearchCompleteListener.html], you can access all the details of the results returned from the search and handle them in a programmatic way.

Let's now replace the contents of the !SimpleSearch class again, this time with the code below.

{{{
public class SimpleSearch implements EntryPoint {
  int currentRow;
  FlexTable resultsTable;

  public void onModuleLoad() {

    resultsTable = new FlexTable();
    SearchControlOptions options = new SearchControlOptions();
    
    WebSearch webSearch = new WebSearch();
    // Choose no HTML generation for quicker results.
    webSearch.setNoHtmlGeneration();
    options.add(webSearch);
    final SearchControl control = new SearchControl(options);
    control.addSearchCompleteHandler(new SearchCompleteHandler() {

      public void onSearchComplete(SearchCompleteEvent event) {
        WebSearch search = (WebSearch) event.getSearch();
        WebResult result = (WebResult) event.getResult();
        ++currentRow;
        
        resultsTable.setText(currentRow, 0, "" + currentRow);
        resultsTable.setHTML(currentRow, 1, "<a href=\"" + result.getUrl() + "\">" 
            + result.getTitle() + "</a>");
      }

    });
    final TextBox textBox = new TextBox();
    textBox.setText("treehouse");
    Button button = new Button("Run Search");
    button.addClickListener(new ClickListener() {

      public void onClick(Widget sender) {
        for (int i = 0 ; resultsTable.getRowCount() > 0; ++i) {
          resultsTable.removeRow(0);
        }
        currentRow = 0;
        control.execute(textBox.getText());
      }

    });

    VerticalPanel vp = new VerticalPanel();
    vp.add(textBox);
    vp.add(button);
    vp.add(resultsTable);
    
    RootPanel.get().add(vp);

  }
}
}}}


Here is a screen capture of the resulting application in hosted mode.
  
  [http://gwt-google-apis.googlecode.com/svn/wiki/AJAXSearch-nohtml.png]


You should now have the basics of a working application using the Google AJAX Search Library for GWT. For more information on the classes and search options available, see the [http://gwt-google-apis.googlecode.com/svn/javadoc/search/1.0/index.html library class reference] and the [http://code.google.com/apis/ajaxsearch/ Google AJAX Search API Developer's Guide]
