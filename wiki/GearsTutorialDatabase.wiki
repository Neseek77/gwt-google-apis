#summary Using the Gears Database in a GWT project

== Creating your project ==

Start by creating a new GWT project. This example uses the `applicationCreator` tool.  It would be easiest to start with this tool because it sets up all the classpaths for you. Create a sample with this tool, then, if you want to add the API to another project, you can compare the differences in the project files generated by the tool.

== Updating <project>-compile and <project>-shell ==

First, create a project with `projectCreator` and `applicationCreator` as shown in the [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(GettingStarted) GWT Getting Started tutorial] and the [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(DevGuideDeveloperGuide) Developer Guide].  In the following example, the GWT Google API jar file `gwt-gears.jar` has been unpacked in `/usr/local/gwt-gears`

{{{
$PP_OFF
$ projectCreator -eclipse GearsDatabaseTutorial -out GearsDatabaseTutorial \
     -addToClassPath /usr/local/gwt-gears/gwt-gears.jar
Created directory GearsDatabaseTutorial/src
Created directory GearsDatabaseTutorial/test
Created file GearsDatabaseTutorial/.project
Created file GearsDatabaseTutorial/.classpath

$ applicationCreator -eclipse GearsDatabaseTutorial \ 
     -out GearsDatabaseTutorial \
     -addToClassPath /usr/local/gwt-gears/gwt-gears.jar \
     -addModule com.google.gwt.gears.Gears \
     com.example.google.gwt.gearsdatabasetutorial.client.GearsDatabaseTutorial
Created directory GearsDatabaseTutorial/src/com/example/google/gwt/gearsdatabasetutorial
Created directory GearsDatabaseTutorial/src/com/example/google/gwt/gearsdatabasetutorial/client
Created directory GearsDatabaseTutorial/src/com/example/google/gwt/gearsdatabasetutorial/public
Created file GearsDatabaseTutorial/src/com/example/google/gwt/gearsdatabasetutorial/GearsDatabaseTutorial.gwt.xml
Created file GearsDatabaseTutorial/src/com/example/google/gwt/gearsdatabasetutorial/public/GearsDatabaseTutorial.html
Created file GearsDatabaseTutorial/src/com/example/google/gwt/gearsdatabasetutorial/public/GearsDatabaseTutorial.css
Created file GearsDatabaseTutorial/src/com/example/google/gwt/gearsdatabasetutorial/client/GearsDatabaseTutorial.java
Created file GearsDatabaseTutorial/GearsDatabaseTutorial.launch
Created file GearsDatabaseTutorial/GearsDatabaseTutorial-shell
Created file GearsDatabaseTutorial/GearsDatabaseTutorial-compile
}}}

This command sets up a standard project, plus adds the library `/usr/local/gwt-maps/gwt-gears.jar` to the Java classpath for the launch, compile and .and eclipse definitions.


Test to see that hosted mode and web mode work by running the `GearsDatabaseTutorial-shell` script.  You should see the skeleton project come up:

  http://gwt-google-apis.googlecode.com/svn/wiki/GettingStartedBasic1.png

Also try out the `GearsDatabaseTutorial-compile` script:

{{{
$PP_OFF
$ ./GearsDatabaseTutorial-compile
Compiling into ./www/com.example.google.gwt.mapstutorial.MapsTutorial
Copying all files found on public path
Compilation succeeded
}}}


= Creating a Small Project using the Google Gears Database API =

Before continuing, make sure you can launch the skeleton project in hosted mode by either running _!GearsDatabaseTutorial-shell_ from the command line or using the _Run_ configuration from Eclipse.  Make sure you test the _Compile/Browse_ button in hosted mode as well.  If you encounter any problems, read back over the previous instructions.  If you still need help, try searching and/or posting to the Google-Web-Toolkit group.

== Modify !GearsDatabaseTutorial.gwt.xml ==

The Google Gears plugin is a component that must be installed by users and is not supported on all browser configurations.  Thus, you will want to redirect users when your application detects that the Gears plugin is not available.  You can create a rebind rule in your GWT module that will redirect users to a different page in this instance.

{{{
  <!-- Rebind the entry point if Gears is not installed -->
  <replace-with class="com.example.google.gwt.gearsdatabasetutorial.client.NoGears">
    <when-type-is class="com.example.google.gwt.gearsdatabasetutorial.client.GearsDatabaseTutorial"/>
    <when-property-is name="gears.installed" value="false"/>
  </replace-with>
}}}

== Update the HTML host file ==

Replace the body of the HTML host file `com/example/google/gwt/mapstutorial/public/MapsTutorial.html` with a `<div>` tag that we can use for the GWT application.

{{{
<body>

    <h1>GearsDatabaseTutorial</h1>

    <div id="gearsTutorial">

</body>
}}}

== Use a Database object in the  .java source ==

To complete the `GearsDatabaseTutorial.java`, you can replace the `onModuleLoad()` with the following methods that create a database, insert data, and read from a simple database. 

{{{
package com.example.google.gwt.gearsdatabasetutorial.client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.gears.client.Factory;
import com.google.gwt.gears.client.GearsException;
import com.google.gwt.gears.client.database.Database;
import com.google.gwt.gears.client.database.DatabaseException;
import com.google.gwt.gears.client.database.ResultSet;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.RootPanel;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * A demonstration of how to use Google Gears' Database feature.
 */
public class GearsDatabaseTutorial implements EntryPoint {
  private Database db;
  
  /**
   * Each time the application is reloaded, a new entry will be added to the database.
   */
  public void onModuleLoad() {

    // Create the database if it doesn't exist.
    try {
      db = Factory.getInstance().createDatabase();
      db.open("gears-database-tutorial");
      // The 'int' type will store up to 8 byte ints depending on the magnitude of the 
      // value added.
      db.execute("create table if not exists tutorial (Timestamp int)");
    } catch (GearsException e) {
      Window.alert(e.toString());
    }
    
    // Add an entry to the database
    try {
      db.execute("insert into tutorial values (?)", new String[] {
          Long.toString(System.currentTimeMillis())});
    }
    catch (DatabaseException e) {
      Window.alert(e.toString());
    }
  
    // Fetch previous results from the database.
    List<String> timestamps= new ArrayList<String>();
    try {
      ResultSet rs = db.execute("select * from tutorial order by Timestamp");
      for (int i = 0; rs.isValidRow(); ++i, rs.next()) {
        timestamps.add(rs.getFieldAsString(0));
      }
      rs.close();
    } catch (DatabaseException e) {
      Window.alert(e.toString());
    }
    
    // Display the list of results in a table
    Grid grid = new Grid(timestamps.size() + 1, 1);
    grid.setText(0, 0, "Accesses to this Page:");
    for (int row = 0; row < timestamps.size(); ++row) {
      Date stamp = new Date(Long.valueOf(timestamps.get(row)));
      grid.setText(row + 1, 0, stamp.toString()); 
    }

    RootPanel.get("gearsTutorial").add(grid);
  }
}
}}}


== Create an alternative EntryPoint ==

This alternative EntryPoint is used when the Gears plugin is not detected in the browser.  Save this class as `NoGears.java` in the same package with the `GearsDatabaseTutorial` class.

{{{
package com.example.google.gwt.gearsdatabasetutorial.client;

import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.RootPanel;

/**
 * This entry point will be used when no Gears plugin is detected
 */
public class NoGears {
  public void onModuleLoad() {
    RootPanel rootPanel = RootPanel.get();
    rootPanel.add(new HTML(
        "<font color=\"red\">ERROR: This browser does not support Google Gears. "
        + " Please <a href=\"http://gears.google.com/\">install Gears</a> " 
        + "and reload the application.  Note that GWT Gears applications can "
        + "only be debugged in hosted mode on Windows.</font>"));
  }
}
}}}

== Run the !GearsDatabaseTutorial sample project ==

Now, you should be able to execute your sample project in hosted mode by  launch the skeleton project in hosted mode by either running _!GearsDatabaseTutorial-shell_ from the command line or using the _Run_ configuration from Eclipse.  

If you would like to see your project in your host's web browser (web mode), press the _Compile/Browse_ button in hosted mode.
