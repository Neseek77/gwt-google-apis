#summary Getting started using visualizations in your GWT application.

= Setup =

   * Make sure that the jar file containing the GWT Google Visualizations API is in your classpath.
   * Make sure that your GWT module inherits "com.google.gwt.visualization.Visualization".
   * In the web page (HTML, JSP, etc.) where you load your gwt module, include the Google AJAX APIs script tag and to call google.load("visualization", "1").  For example:

{{{
    <script type="text/javascript" src="http://www.google.com/jsapi"></script>
    <script type="text/javascript">
      google.load("visualization", "1", {packages:["piechart"]});
    </script>
}}}

Using the packages property, specify the names of visualizations you want to use in your page.  Support for some visualizations is included in the GWT Visualization API.  If you want to use a visualization that is currently unsupported, it's easy to write your own wrapper.

The first script tag loads the google.load function, which lets you load individual Google APIs. Then, {{{ google.load("visualization", "1", {packages: ["piechart"]) }}} loads Version 1 of the Visualization API, and the pie chart package. Currently the Visualization API is in Version 1. Newer versions may be available in the future.

To load more than one visualization package, provide the list of the visualizations you require:

{{{
google.load("visualization", "1", {packages:["piechart", "table", "linechart"]});
}}}

To find the name of each visualization, look at the [http://code.google.com/apis/visualization/documentation/gallery.html Visualization Gallery], open the documentation page of the visualization you need, and read the load instruction.  Visualizations written by third parties may require loading an additional script.

= A "Hello World" Application =

The following example displays a pie chart:

{{{
package hello.client;

import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Panel;
import com.google.gwt.user.client.ui.SimplePanel;
import com.google.gwt.visualization.client.events.SelectHandler;
import com.google.gwt.visualization.client.visualizations.DataTable;
import com.google.gwt.visualization.client.visualizations.DataTable.ColumnType;
import com.google.gwt.visualization.client.visualizations.PieChart.Options;
import com.google.gwt.visualization.client.visualizations.PieChart;

public class Activities extends Composite {
  private Panel mainPanel = new SimplePanel();

  public Activities() {
    initWidget(mainPanel);
    VisualizationContainer<PieChart, Options> pie = PieChart.widget(createDataTable(), createOptions());
    pie.addSelectHandler(createSelectHandler());
    mainPanel.add(pie);
  }

  private Options createOptions() {
    Options options = DrawOptions.create();
    options.setWidth(400);
    options.setHeight(240);
    options.set3D(true);
    options.setTitle("My Daily Activities");
    return options;
  }

  private SelectHandler createSelectHandler() {
    return new SelectHandler() {
      @Override
      public void onSelect(SelectEvent event) {
        Window.alert("selection changed");
      }
    };
  }

  private DataTable createTable() {
    DataTable data = DataTable.create();
    data.addColumn(ColumnType.STRING, "Task");
    data.addColumn(ColumnType.NUMBER, "Hours per Day");
    data.addRows(5);
    data.setValue(0, 0, "Work");
    data.setValue(0, 1, 11);
    data.setValue(1, 0, "Eat");
    data.setValue(1, 1, 2);
    data.setValue(2, 0, "Commute");
    data.setValue(2, 1, 2);
    data.setValue(3, 0, "Watch TV");
    data.setValue(3, 1, 2);
    data.setValue(4, 0, "Sleep");
    data.setValue(4, 1, 7);
    return data;
  }
}
}}}

To see what this looks like, just add a "new Activities()" to a gwt panel.

== Creating Draw Options ==

In GWT GViz, each visualization has its own Options class.  These classes are subclasses of JavaScriptObject, so they are created with the static method Options.create().  The properties of the Options class for each visualization correspond to the supported names and value types defined in the GViz documentation of each specific visualization.

{{{
  private Options createOptions() {
    Options options = DrawOptions.create();
    options.setWidth(400);
    options.setHeight(240);
    options.set3D(true);
    options.setTitle("My Daily Activities");
    return options;
  }
}}}

== Creating a DataTable ==

For all visualizations, the data is created using the DataTable class or the DataView class. A DataTable is a two dimensional table, with rows and columns and cells. The DataTable class is a subclass of JavaScriptObject, so new instances are created by calling the static method DataTable.create().  Each column has a data type defined by the DataTable.ColumnType enum. 

{{{
  private DataTable createTable() {
    DataTable data = DataTable.create();
    data.addColumn(ColumnType.STRING, "Task");
    data.addColumn(ColumnType.NUMBER, "Hours per Day");
    data.addRows(5);
    data.setValue(0, 0, "Work");
    data.setValue(0, 1, 11);
    data.setValue(1, 0, "Eat");
    data.setValue(1, 1, 2);
    data.setValue(2, 0, "Commute");
    data.setValue(2, 1, 2);
    data.setValue(3, 0, "Watch TV");
    data.setValue(3, 1, 2);
    data.setValue(4, 0, "Sleep");
    data.setValue(4, 1, 7);
    return data;
  }
}}}

== Creating a DataView ==

To provide a read-only view of a DataTable, you can bind a [http://code.google.com/apis/visualization/documentation/reference.html#DataView DataView] to your DataTable and call Visualization.draw() with the DataView.  DataView also allows you to expose a subset of columns and show columns in a different order.

{{{
  DataView view = DataView.create(table);
  view.setColumns(new Integer[]{3, 2});
  viz.draw(view, options);
}}}

== Creating a SelectHandler ==

Handlers are created for visualizations very similarly to how listeners are created for widgets.  Visualizations define "addXXXHandler" methods that take a handler for some event.  Many visualizations support the SelectHandler/SelectEvent.

{{{
  private SelectHandler createSelectHandler() {
    return new SelectHandler() {
      @Override
      public void onSelect(SelectEvent event) {
        Window.alert("selection changed");
      }
    };
  }
}}}