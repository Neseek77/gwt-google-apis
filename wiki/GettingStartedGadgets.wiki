#summary How to write and debug a Google Gadget using GWT

= Introduction =

This section will get you started writing your first Google Gadget.  But before you start, make sure you are familiar with [http://www.google.com/ig iGoogle] and [http://code.google.com/apis/gadgets/ the Gadgets developer site].

The Google Apis for GWT Gadget support simplifies gadget development by automatically generating a [http://code.google.com/apis/gadgets/docs/legacy/reference.html#XML_Ref Gadget Specification] from Java source, inserting a selection script in the specification much like a regular GWT project.  After compiling your gadget with GWT, all files are in place to [http://code.google.com/apis/gadgets/docs/legacy/publish.html publish] your gadget.

== Looking at a Sample Gadget ==

Look at the sample program _Hello Gadgets_ that is shipped with the `gwt-gadgets` distribution

   [http://code.google.com/p/gwt-google-apis/source/browse/trunk/gadgets/samples/hellogadgets/src/com/google/gwt/gadgets/sample/hellogadgets/client/HelloGadgets.java HelloGadgets.java]

There are some differences you will notice from a standard GWT project.

  # There is no class that implements the [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/client/EntryPoint.html EntryPoint] interface.
  # The entry point class is a subclass of [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.html Gadget].
  # There is an `@ModulePrefs` annotation on the class
  # Here is a relationship between the [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.html Gadget] subclass and the [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/UserPreferences.html UserPreferences] subclass named `HelloPreferences`.


These differences derive from several the fact that a Gadget must adhere to a specific framework as described in the [http://code.google.com/apis/gadgets/devguide_landing.html Google Gadget developer's documentation].  To meet this requirement, Gadget support is implemented using a custom [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/ext/Linker.html GWT Linker]. 

== Writing a Simple Gadget ==

You can start off by generating a project using `projectCreator` and `applicationCreator` in the usual way.  If you've never created a GWT project before, look at the [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(GettingStarted) GWT Tutorial].  Note that this invocation uses the `-addToClassPath` and `-addToModule` arguments to add `gwt-gadgets.jar` to the classpath and the `Gadgets.gwt.xml` module to be inherited in the generated project `gwt.xml` file.

=== Creating a Skeleton Project ===
{{{
$PP_OFF
$ projectCreator -eclipse SimpleGadget -out SimpleGadget \
     -addToClassPath /usr/local/gadgets/gwt-gadgets.jar

Created directory SimpleGadget/src
Created directory SimpleGadget/test
Created file SimpleGadget/.project
Created file SimpleGadget/.classpath

$ applicationCreator -eclipse SimpleGadget -out SimpleGadget \
     -addToClassPath /usr/local/gadgets/gwt-gadgets.jar \
     -addModule com.google.gwt.gadgets.Gadgets com.example.simplegadget.client.SimpleGadget
Created directory SimpleGadget/src/com/example/simplegadget
Created directory SimpleGadget/src/com/example/simplegadget/client
Created directory SimpleGadget/src/com/example/simplegadget/public
Created file SimpleGadget/src/com/example/simplegadget/SimpleGadget.gwt.xml
Created file SimpleGadget/src/com/example/simplegadget/public/SimpleGadget.html
Created file SimpleGadget/src/com/example/simplegadget/public/SimpleGadget.css
Created file SimpleGadget/src/com/example/simplegadget/client/SimpleGadget.java
Created file SimpleGadget/SimpleGadget.launch
Created file SimpleGadget/SimpleGadget-shell
Created file SimpleGadget/SimpleGadget-compile
}}}

You can compile this project to see if it works, but this project is just a skeleton and will need to be modified to become a Gadget.

=== Modify the Skeleton Project ===

Start by opening up `SimpleGadget.java` and changing the class declaration to read:

{{{
   public class SimpleGadget extends Gadget<UserPreferences> 
}}}

Remove the `onModuleStart()` method.  No constructor is necessary.

Next, you need to implement the `init(UserPreferences)` method from the `Gadget` class.  This sample implements a very simple body for the Gadget.

{{{
  @Override
  protected void init(UserPreferences preferences) {
    Button simpleButton = new Button("SimpleGadget");
    simpleButton.addClickListener(new ClickListener() {
      void onClick(Widget sender) {
        Window.alert("Hello World!");
      }
    });
    RootPanel.get().add(simpleButton);
  }
}}}


Finally, above the class statement, add an annotation to set the gadget title, author and email:

{{{
@ModulePrefs(title = "SimpleGadget", author = "yournamehere", author_email = "yournamehere@gmail.com")
}}}

[http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.ModulePrefs.html @ModulePrefs] provides attributes to the [http://code.google.com/apis/gadgets/docs/legacy/reference.html#Moduleprefs_Ref  `<ModulePrefs>`] tag in the Gadget Specification.


=== Specifying Features ===

If the Gadget requires access to features of the container, it should implement any of the _!NeedsFoo_ interfaces, which currently include:
 
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/NeedsAnalytics.html NeedsAnalytics]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/NeedsDynamicHeight.html NeedsDynamicHeight]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/NeedsIntrinsics.html NeedsIntrinsics]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/NeedsSetPrefs.html NeedsSetPrefs]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/NeedsSetTitle.html NeedsSetTitle]


At runtime, all feature setters will be called strictly before [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.html#init(T) init(UserPreferences)]. The order in which the setters are called is undefined.


For example, if you wanted to use the optional feature to set the title dynamically, you would need to inherit the `NeedsSetTitle` interface.

{{{
/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
@ModulePrefs(title="Original Title", author = "yournamehere", author_email = "yournamehere@gmail.com")
public class NeedsSetTitleGadget extends Gadget<UserPreferences> implements
    NeedsSetTitle {
  int titleIndex = 0;
  String[] titles = { "NeedsTitle Example", "Hello World!","Goodbye World!"};
  SetTitleFeature titleFeature;

  @Override
  protected void init(UserPreferences preferences) {
    Button changeTitleButton = new Button("Change Title");
    changeTitleButton.addClickListener(new ClickListener () {

      public void onClick(Widget sender) {
        titleFeature.setTitle(titles[titleIndex++ % titles.length]);
      }
      
    });
   RootPanel.get().add(changeTitleButton);
  }

  public void initializeFeature(SetTitleFeature feature) {
    this.titleFeature = feature;
  }
}
}}}

And here is a screenshot of the resulting gadget:

   [http://gwt-google-apis.googlecode.com/svn/wiki/GettingStartedGadgets-ChangeTitle.png]


=== Specifying Preferences ===

The gadget spec allows you to specify user preferences for your gadget.  User preferences allow the gadget container to provide a user interface and storage for parameters used to customize the gadget. 

In GWT, access to user preferences is provided through a user-defined subtype of the [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/UserPreferences.html UserPreferences] interface. Each preference should be defined as a zero-argument method, returning the desired type of [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/UserPreferences.Preference.html UserPreferences.Preference Preference]. The Gadget type should be parameterized with the specific [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/UserPreferences.html UserPreferences] subtype, which will be provided to the [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.html#init(T) init(UserPreferences)] method. 


The following sample code shows how to implement a simple checkbox type of preference.  In this sample, the gadget displays a different menu depending on whether the user checks the _Vegetarian_ checkbox.  First, the custom `UserPreference` subclass:

{{{
import com.google.gwt.gadgets.client.BooleanPreference;
import com.google.gwt.gadgets.client.UserPreferences;

public interface MealPreferences extends UserPreferences {

  @PreferenceAttributes(display_name = "Vegetarian", default_value = "false")
  BooleanPreference noMeat();

}
}}}

Next, a `Gadget` class that uses the `MealPreferences` class.  The meal choices are displayed in a table - when the user selects a dish, an alert window is opened.

{{{
import com.google.gwt.gadgets.client.Gadget;
import com.google.gwt.gadgets.client.Gadget.ModulePrefs;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.CheckBox;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.Panel;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
@ModulePrefs(title = "MealPreferences Gadget", author = "yournamehere", author_email = "yournamehere@gmail.com")
public class MealPreferencesGadget extends Gadget<MealPreferences> {

  private String[] meatEntrees = {
      "steak kabobs", "lamb fricassee", "chicken kiev"};
  private String[] vegEntrees = {"saag paneer", "baba ganoush", "boca burger"};
  private String[] dishes;

  @Override
  protected void init(MealPreferences preferences) {
    initDishes(preferences);

    // Create a table with a checklist of all available dishes based on the
    // user's dietary preferences.
    Panel p = new VerticalPanel();
    p.setWidth("100%");

    FlexTable ft = new FlexTable();

    int index = 0;
    for (String dish : dishes) {
      CheckBox cb = new CheckBox();
      final String dishCopy = dish;
      cb.addClickListener(new ClickListener() {
        public void onClick(Widget sender) {
          Window.alert("Your order of " + dishCopy + " will be right up.");
        }
      });
      ft.setWidget(index, 0, cb);
      ft.setHTML(index, 1, dish);
      index++;
    }
    p.add(ft);
    RootPanel.get().add(p);
  }

  private void initDishes(MealPreferences preferences) {
    // Customize the list of dishes to the dining preferences of the user.
    if (preferences.noMeat().getValue().booleanValue()) {
      dishes = vegEntrees;
    } else {
      dishes = meatEntrees;
    }
  }
}
}}}


Here is a screen shot of the resulting gadget's preferences menu in iGoogle:

   [http://gwt-google-apis.googlecode.com/svn/wiki/GettingStartedGadgets-MealPreferences.png]

=== Compiling your Gadget ===

Use the SampleGadget-compile shell script to build your project, or use any other method to invoke the GWT compiler on the module `SampleGadget.gwt.xml`.

The output of the compiler will have:
   * Several `.cache.js` files, one per compiler permutation.  These contain the application logic for your gadget compiled for each browser/locale combination.
   * A `SampleGadgets.html` file.  This is just a holdover from a regular GWT module and is not used in publishing a gadget (but it can be useful in hosted mode).  
   * Other resources such as image files.
   * A `*.xml` file.  This is the gadget specification file that you will need in order to [http://code.google.com/apis/gadgets/docs/legacy/publish.html publish your gadget].  It contains:
       * Information about your gadget specified in `@ModulePrefs` 
       * Which features your gadget needs, 
       * A user preference value specification, 
       * Some !JavaScript code for initializing the Gadget API and loading one of the compiler permutations.

== Uploading and Syndicating your Gadget ==

First, you should take the output files from the compiler and upload them all to the same directory on a web server.

For debugging your gadget, register the URL for your gadget spec file (the `.gadget.xml` file created when you compile in the place it has been uploaded to) using Syndication.  See [http://code.google.com/apis/gadgets/docs/legacy/publish.html#Syndication Publishing Using Syndication] or search for the Syndication gadget in the iGoogle content directory.  After the URL is registered, you can add it to your iGoogle page, or create a simple host web page using the 'Get the Code' button.

Once your debugging is complete, you can list your gadget in the [http://code.google.com/apis/gadgets/docs/legacy/publish.html#Syndication content directory]. 

== Debugging your Gadget in Hosted Mode ==

  _TBD_