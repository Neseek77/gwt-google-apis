#summary How to write and debug a Google Gadget using GWT

= Introduction =

This section will get you started writing your first Google Gadget.  But before you start, make sure you are familiar with [http://www.google.com/ig iGoogle] and [http://code.google.com/apis/gadgets/ the Gadgets developer site].

== Looking at a Sample Gadget ==

Look at the sample program _Hello Gadgets_ that is shipped with the `gwt-gadgets` distribution

   [http://code.google.com/p/gwt-google-apis/source/browse/trunk/gadgets/samples/hellogadgets/src/com/google/gwt/gadgets/sample/hellogadgets/client/HelloGadgets.java HelloGadgets.java]

There are some differences you will notice from a standard GWT project.

  # There is no class that implements the [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/client/EntryPoint.html EntryPoint] interface.
  # The entry point class is a subclass of [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.html Gadget].
  # There is an `@ModulePrefs` annotation on the class
  # Here is a releationship between the [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.html Gadget] subclass and the [file:///home/zundel/workspace/gwt-google-apis/trunk/gadgets/build/out/doc/javadoc/com/google/gwt/gadgets/client/UserPreferences.html UserPreferences] subclass named `HelloPreferences`.

These differences derive from several the fact that a Gadget must adhere to a specific framework as described in the [http://code.google.com/apis/gadgets/devguide_landing.html Google Gadget developer's documentation].  To meet this requirement, Gadget support is implemented using a custom [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/ext/Linker.html GWT Linker]. 

== Writing a Simple Gadget ==

You can start off by generating a project using `projectCreator` and applicationCreator` in the usual way.  Note that this invocation uses the -addToClassPath and -addToModule arguments to add `gwt-gadgets.jar` to the classpath and the `Gadgets.gwt.xml` module to be inherited in the generated project `gwt.xml` file.

=== Creating a Skeleton Project ===
{{{
$ projectCreator -eclipse SimpleGadget -out SimpleGadget -addToClassPath /home/zundel/gadgets/gwt-gadgets.jar

Created directory SimpleGadget/src
Created directory SimpleGadget/test
Created file SimpleGadget/.project
Created file SimpleGadget/.classpath

$ applicationCreator -eclipse SimpleGadget -out SimpleGadget -addToClassPath /home/zundel/gadgets/gwt-gadgets.jar -addModule com.google.gwt.gadgets.Gadgets com.example.simplegadget.client.SimpleGadget
Created directory SimpleGadget/src/com/example/simplegadget
Created directory SimpleGadget/src/com/example/simplegadget/client
Created directory SimpleGadget/src/com/example/simplegadget/public
Created file SimpleGadget/src/com/example/simplegadget/SimpleGadget.gwt.xml
Created file SimpleGadget/src/com/example/simplegadget/public/SimpleGadget.html
Created file SimpleGadget/src/com/example/simplegadget/public/SimpleGadget.css
Created file SimpleGadget/src/com/example/simplegadget/client/SimpleGadget.java
Created file SimpleGadget/SimpleGadget.launch
Created file SimpleGadget/SimpleGadget-shell
Created file SimpleGadget/SimpleGadget-compile
}}}

You can compile this project to see if it works, but this project is just a skeleton and will need to be modified to become a Gadget.

=== Modify the Skeleton Project ===

Start by opening up `SimpleGadget.java` and changing the class declaration to read:

{{{
   public class SimpleGadget extends Gadget<UserPreferences> 
}}}

Remove the `onModuleStart()` method.  No constructor is necessary.

Next, you need to implement the `init(UserPreferences)` method from the `Gadget` class.  This sample implements a very simple body for the Gadget.

{{{
  @Override
  protected void init(UserPreferences preferences) {
    Button simpleButton = new Button("SimpleGadget");
    simpleButton.addClickListener(new ClickListener() {
      void onClick(Widget sender) {
        Window.alert("Hello World!");
      }
    });
    RootPanel.get().add(simpleButton);
  }
}}}


Finally, above the class statement, add an annotation to set the gadget title, author and email:

{{{
@ModulePrefs(title = "SimpleGadget", author = "yournamehere", author_email = "yournamehere@gmail.com")
}}}


_TBD_


=== Specifing Preferences ===

_TBD_

If the Gadget requires access to features of the container, it should implement any of the NeedsFoo interfaces.

contains information about the gadget such as its title, description, author, and other optional features.

  3. At runtime, all feature setters will be called strictly before init(UserPreferences). The order in which the setters are called is undefined.

Access to user preferences is provided through a user-defined subtype of the UserPreferences interface. Each preference should be defined as a zero-argument method, returning the desired type of UserPreferences.Preference. The Gadget type should be parameterized with the specific UserPreferences subtype, which will be provided to the init(UserPreferences) method. 




== Registering your Gadget ==

  _TBD_

  (Most of this is covered by [http://code.google.com/apis/gadgets/ the Gadgets developer site].)

== Debugging your Gadget in Hosted Mode ==

  _TBD_
