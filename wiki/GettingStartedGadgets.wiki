#summary How to write and debug a Google Gadget using GWT

= Introduction =

This section will get you started writing your first Google Gadget.  But before you start, make sure you are familiar with [http://www.google.com/ig iGoogle] and [http://code.google.com/apis/gadgets/ the Gadgets developer site].

== Looking at a Sample Gadget ==

Look at the sample program _Hello Gadgets_ that is shipped with the `gwt-gadgets` distribution

   [http://code.google.com/p/gwt-google-apis/source/browse/trunk/gadgets/samples/hellogadgets/src/com/google/gwt/gadgets/sample/hellogadgets/client/HelloGadgets.java HelloGadgets.java]

There are some differences you will notice from a standard GWT project.

  # There is no class that implements the [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/client/EntryPoint.html EntryPoint] interface.
  # The entry point class is a subclass of [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.html Gadget].
  # There is an `@ModulePrefs` annotation on the class
  # Here is a releationship between the [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.html Gadget] subclass and the [file:///home/zundel/workspace/gwt-google-apis/trunk/gadgets/build/out/doc/javadoc/com/google/gwt/gadgets/client/UserPreferences.html UserPreferences] subclass named `HelloPreferences`.

These differences derive from several the fact that a Gadget must adhere to a specific framework as described in the [http://code.google.com/apis/gadgets/devguide_landing.html Google Gadget developer's documentation].  To meet this requirement, Gadget support is implemented using a custom [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/ext/Linker.html GWT Linker]. 

== Writing a Simple Gadget ==

You can start off by generating a project using `projectCreator` and applicationCreator` in the usual way.  Note that this invocation uses the -addToClassPath and -addToModule arguments to add `gwt-gadgets.jar` to the classpath and the `Gadgets.gwt.xml` module to be inherited in the generated project `gwt.xml` file.

=== Creating a Skeleton Project ===
{{{
$ projectCreator -eclipse SimpleGadget -out SimpleGadget -addToClassPath /home/zundel/gadgets/gwt-gadgets.jar

Created directory SimpleGadget/src
Created directory SimpleGadget/test
Created file SimpleGadget/.project
Created file SimpleGadget/.classpath

$ applicationCreator -eclipse SimpleGadget -out SimpleGadget -addToClassPath /home/zundel/gadgets/gwt-gadgets.jar -addModule com.google.gwt.gadgets.Gadgets com.example.simplegadget.client.SimpleGadget
Created directory SimpleGadget/src/com/example/simplegadget
Created directory SimpleGadget/src/com/example/simplegadget/client
Created directory SimpleGadget/src/com/example/simplegadget/public
Created file SimpleGadget/src/com/example/simplegadget/SimpleGadget.gwt.xml
Created file SimpleGadget/src/com/example/simplegadget/public/SimpleGadget.html
Created file SimpleGadget/src/com/example/simplegadget/public/SimpleGadget.css
Created file SimpleGadget/src/com/example/simplegadget/client/SimpleGadget.java
Created file SimpleGadget/SimpleGadget.launch
Created file SimpleGadget/SimpleGadget-shell
Created file SimpleGadget/SimpleGadget-compile
}}}

You can compile this project to see if it works, but this project is just a skeleton and will need to be modified to become a Gadget.

=== Modify the Skeleton Project ===

Start by opening up `SimpleGadget.java` and changing the class declaration to read:

{{{
   public class SimpleGadget extends Gadget<UserPreferences> 
}}}

Remove the `onModuleStart()` method.  No constructor is necessary.

Next, you need to implement the `init(UserPreferences)` method from the `Gadget` class.  This sample implements a very simple body for the Gadget.

{{{
  @Override
  protected void init(UserPreferences preferences) {
    Button simpleButton = new Button("SimpleGadget");
    simpleButton.addClickListener(new ClickListener() {
      void onClick(Widget sender) {
        Window.alert("Hello World!");
      }
    });
    RootPanel.get().add(simpleButton);
  }
}}}


Finally, above the class statement, add an annotation to set the gadget title, author and email:

{{{
@ModulePrefs(title = "SimpleGadget", author = "yournamehere", author_email = "yournamehere@gmail.com")
}}}

[http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.ModulePrefs.html @ModulePrefs] provides a few initial preferences values.

_TBD_



=== Specifying Features ===

If the Gadget requires access to features of the container, it should implement any of the _!NeedsFoo_ interfaces, which currently include:
 
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/NeedsAnalytics.html NeedsAnalytics]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/NeedsDynamicHeight.html NeedsDynamicHeight]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/NeedsIntrinsics.html NeedsIntrinsics]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/NeedsSetPrefs.html NeedsSetPrefs]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/NeedsSetTitle.html NeedsSetTitle]


At runtime, all feature setters will be called strictly before [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.html#init(T) init(UserPreferences)]. The order in which the setters are called is undefined.


_TBD_ add sample code.


=== Specifing Preferences ===

The gadget spec allows you to specify user preferences for your gadget.  User preferences allow the gadget container to provide a user interface and storage for parameters used to customize the gadget. 

In GWT, access to user preferences is provided through a user-defined subtype of the [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/UserPreferences.html UserPreferences] interface. Each preference should be defined as a zero-argument method, returning the desired type of [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/UserPreferences.Preference.html UserPreferences.Preference Preference]. The Gadget type should be parameterized with the specific [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/UserPreferences.html UserPreferences] subtype, which will be provided to the [http://gwt-google-apis.googlecode.com/svn/javadoc/1.1/gadgets/com/google/gwt/gadgets/client/Gadget.html#init(T) init(UserPreferences)] method. 


_TBD_ add sample code.


=== Compiling your Gadget ===

Use the SampleGadget-compile shell script to build your project, or use any other method to invoke the GWT compiler on the module `SampleGadget.gwt.xml1.

The output of the compiler will have:
   * Several `.cache.js` files, one per compiler permutation.  These contain the application logic for your gadget compiled for each browser/locale combination.
   * A `SampleGadgets.html` file.  This is just a holdover from a regular GWT module and is not used in publishing a gadget (but it can be useful in hosted mode).  
   * Other resources such as image files.
   * A `*.xml` file.  This is the gadget specification file that you will need in order to [http://code.google.com/apis/gadgets/docs/legacy/publish.html publish your gadget].  It contains:
       * Information about your gadget specified in `@ModulePrefs` 
       * Which features your gadget needs, 
       * A user preference value specification, 
       * Some !JavaScript code for initializing the Gadget API and loading one of the compiler permutations.

== Registering your Gadget ==

  _TBD_

  (Most of this is covered by [http://code.google.com/apis/gadgets/ the Gadgets developer site].)

== Debugging your Gadget in Hosted Mode ==

  _TBD_