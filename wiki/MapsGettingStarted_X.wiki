#summary Using Google Maps in a GWT project

= Getting Started with Google Maps =

The Google Maps API provides a convenient JavaScript API which allows you to add mapping functionality to your application. The [http://code.google.com/p/gwt-google-apis Google Maps library for GWT] allows you to access this JavaScript API from Java code compiled with the GWT compiler.

This guide describes the basics of getting the Google Maps Library working in a GWT project. For more information on the functionality provided by the API itself, see the [http://code.google.com/apis/maps/ Google Maps API] developer's guide.


== Assumptions ==
 
  * You are already familiar with [http://code.google.com/webtoolkit/overview.html Google Web Toolkit]
  * You know how to [http://code.google.com/eclipse/docs/creating_new_webapp.html create a new GWT project.]

== Downloading the Google Maps Library for GWT ==

You can download the latest release of the library from the [http://code.google.com/p/gwt-google-apis/downloads/ project download page]. After you download the distribution, uncompress it.  Inside the folder you will find a .jar file named `gwt-maps.jar`. 

You can either reference the `.jar` file from the folder that you uncompressed the project in, or copy it to another location, such as the location of your GWT distribution (containing `gwt-dev.jar` and `gwt-user.jar` files).  In this example, we've chosen to copy the file to the path `/usr/local/gwt-maps`.  If you are using Windows, you might choose to copy these files to a path like `C:\gwt\gwt-maps`

== Creating a new GWT Project ==

Start by creating a new GWT project called !SimpleMaps as described in the [http://code.google.com/eclipse/docs/creating_new_webapp.html Google Plugin for Eclipse user's guide.]

Since we are working with an additional library, add `gwt-maps.jar` to the Java classpath.  Then, add the inherits line for `com.google.gwt.maps.GoogleMaps` to your module.

{{{
$PP_OFF
    <inherits name='com.google.gwt.maps.GoogleMaps' />
}}}

==Adding the Maps script tag to your module XML file==

Your GWT application will need access to the Maps API, as well as the API key. In order to do this, you must include a `<script>` tag in your module's `SimpleMaps.gwt.xml` file. Include the script tag shown in your module.xml file above the automatically generated stylesheet reference.


{{{
 <!-- Load the Google Maps GWT bindings from the gwt-google-apis project -->
 <inherits name="com.google.gwt.maps.GoogleMaps" />

 <!--
    If you want to deploy this application outside of localhost,
    you must obtain a Google Maps API key at:
    http://www.google.com/apis/maps/signup.html
    Replace the src attribute below with a URL that contains your key.
  -->
 <!-- script src="http://maps.google.com/maps?gwt=1&amp;file=api&amp;v=2&amp;key=???" /-->

 <!-- You can usually run under localhost without a key                           -->
 <!-- Set the 'sensor' parameter to true if your app makes use of an onboard
      positioning sensor, such as a GPS reciever.
   -->
 <script src="http://maps.google.com/maps?gwt=1&amp;file=api&amp;v=2&amp;sensor=false" />

}}}

Note that in order to use the Maps API, you need to apply for a Google Maps API key.  Running with no key specified will work with `localhost` for development purposes, but you will need to apply for your own key to deploy to a website.


== Update the HTML host file ==

Replace the body of the HTML host file `src/com/example/google/gwt/mapstutorial/public/SimpleMaps.html` with a `<div>` tag that we can use for the GWT application.

{{{
<body>

    <h1>SimpleMaps</h1>

    <div id="mapsTutorial"></div>

</body>
}}}

== Add a map object to .java source ==

To complete the `src/com/example/google/gwt/mapstutorial/client/SimpleMaps.java` file, add some imports, a member to store a `MapWidget` instance, and replace the body of the `onModuleLoad()` method. 

{{{
package com.example.google.gwt.mapstutorial.client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.maps.client.InfoWindowContent;
import com.google.gwt.maps.client.MapWidget;
import com.google.gwt.maps.client.control.LargeMapControl;
import com.google.gwt.maps.client.geom.LatLng;
import com.google.gwt.maps.client.overlay.Marker;
import com.google.gwt.user.client.ui.RootPanel;

public class SimpleMaps implements EntryPoint {
  private MapWidget map;

  // GWT module entry point method.
  public void onModuleLoad() {
    LatLng cawkerCity = LatLng.newInstance(39.509,-98.434);
    // Open a map centered on Cawker City, KS USA

    map = new MapWidget(cawkerCity, 2);
    map.setSize("500px", "300px");
    
    // Add some controls for the zoom level
    map.addControl(new LargeMapControl());
    
    // Add a marker
    map.addOverlay(new Marker(cawkerCity));

    // Add an info window to highlight a point of interest
    map.getInfoWindow().open(map.getCenter(), 
        new InfoWindowContent("World's Largest Ball of Sisal Twine"));
    
    // Add the map to the HTML host page
    RootPanel.get("mapsTutorial").add(map);
  }
}
}}}


== Run the !SimpleMaps sample project ==

Now save your project and run it in development mode.

Congratulations! You should now have Google Maps API working within a GWT application.

  http://gwt-google-apis.googlecode.com/svn/wiki/GettingStartedBasic5.png

