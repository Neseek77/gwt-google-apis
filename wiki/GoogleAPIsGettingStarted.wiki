#summary Using Google APIs in a project

= Getting Started with Using Google APIs =

*Note: This document is specific to the URL Shortener API. However, the concepts it introduces are universal to other services. Please consult the service's API documentation and !JavaDoc reference for information specific to the service you intend to use.*

== Assumptions ==
 
  * You are already familiar with [http://code.google.com/webtoolkit/overview.html Google Web Toolkit].
  * You know how to [http://code.google.com/eclipse/docs/creating_new_webapp.html create a new GWT project] using the Google Plugin for Eclipse.
  * You are using GWT 2.3 or later.

== Download a service-specific Google API library ==

You can download the latest release of the library from the [http://code.google.com/p/gwt-google-apis/wiki/Downloads download page].

For the purposes of this sample, we will download the [http://code.google.com/p/gwt-google-apis/downloads/detail?name=gwt-urlshortener-v1-0.1-alpha.jar URL Shortener library].

You can either reference the `.jar` file from the folder where you uncompressed the project, or you can copy it to another location, such as the location of your GWT distribution (containing `gwt-dev.jar` and `gwt-user.jar` files).

== Create a new GWT Project ==

Start by creating a new GWT project as described in the [http://code.google.com/eclipse/docs/creating_new_webapp.html GWT Plugin Guide].

Add the jar you just downloaded to the Java classpath.  Then, add the GWT module to your project's module by adding a line like this to your project's gwt.xml file:

{{{
<inherits name='com.google.api.gwt.services.Urlshortener' />
}}}

If you want to communicate with the Buzz service, add this line to your gwt.xml file:

{{{
<inherits name='com.google.api.gwt.services.Buzz' />
}}}

To use the Moderator service instead, the module is `Moderator`, for the Shopping service, use `Shopping`, and so on.

== Communicating with the service ==

Now that your project has the code it needs to make requests to the service, there are a couple of things you need to do to enable requests.

=== Initialize the !GoogleApiRequestTransport ===

Before making a request, you must initialize the transport. To do this, write code like this:

{{{
// e.g., Buzz.class, Moderator.class, Shopping.class, etc...
private Urlshortener urlshortener = GWT.create(Urlshortener.class);

private void initialize() {
  new ClientGoogleApiRequestTransport()
      .setApiAccessKey(YOUR_API_KEY)
      .setApplicationName(YOUR_APPLICATION_NAME)
      .create(new Receiver<GoogleApiRequestTransport>() {
        @Override
        public void onSuccess(GoogleApiRequestTransport transport) {
          urlshortener.initialize(eventBus, transport);

          // Now that your service is initialized, you can make a request.
          // It may be better to publish a "ready" event on the eventBus
          // and listen for it to make requests elsewhere in your code.
          makeRequest();
        }

        @Override
        public void onFailure(ServerFailure error) {
          Window.alert("Failed to initialize Transport!");
        }
      });
}
}}}

This code snippet sets up the service so that it can make requests. It sets your API key (which is available at the [http://code.google.com/apis/console Google APIs Console]), your application's name, and by initializing it with the service in question.

=== Make Requests to the Service ===

The specifics of making a request are different depending on which API you are using, but using the URL Shortener API to expand a short link looks like this:

{{{
Urlshortener urlshortener = GWT.create(Urlshortener.class); // Must be initialized!

private void makeRequest() {
  String shortUrl = "http://goo.gl/XXXXX";
  urlshortener.url().get(shortUrl)
      // If the service had any optional parameters, they would go here, e.g.:
      // .setOptionalParameter("optionalParam")
      // .setAnotherOptionalParameter("anotherOptionalParameter")
      .to(new Receiver<Url>() {
        @Override
        public void onSuccess(Url url) {
          String longUrl = url.getLongUrl();
        }
      })
      .fire();
}
}}}

This code snippet uses the same `urlshortener` instance described earlier, which was instantiated by a call to `GWT.create(Urlshortener.class)`.

Note that required parameters are passed to the `get()` method. When a method requires parameters to be included, they will be present in the method's signature. If the method accepts optional parameters, they will be available in a style that allows them to be appended to the call before `fire()` is called.

== Adding Authentication ==

Some APIs provide methods that access or update a user's private data. Before you make any requests to these APIs, you need to ask the user of your application to authenticate and grant your application access to their data. If you tried the example above, you found out that this was needed when your request failed!

In fact, you need to ask the user for permission and obtain an access token before initializing the transport.  After you initialize the transport with the access token, all requests use the access token. You can get an access token using an    [http://code.google.com/apis/accounts/docs/OAuth2.html OAuth 2.0] flow.

To initiate an OAuth 2.0 flow, use an `OAuth2Login` implementation. The implementation provided with the library is `ClientOAuth2Login`, which delegates to the [http://code.google.com/p/gwt-oauth2 gwt-oauth2] project under the covers to handle the flow.

{{{
private void authenticate() {
  new ClientOAuth2Login(CLIENT_ID)
      .withScopes(Urlshortener.UrlshortenerAuthScope.URLSHORTENER) // Or Buzz.BuzzAuthScope, Moderator.ModeratorAuthScope, etc.
      .login(new Receiver<String>() {
        @Override
        public void onSuccess(String accessToken) {
          initialize(accessToken);
        }
      });
}
}}}

If the service provides multiple scopes, more than one scope can be passed to the `withScopes()` method, e.g., `withScopes(Buzz.BuzzAuthScope.BUZZ_READONLY, Buzz.BuzzAuthScope.PHOTOS)`.

The scopes you provide to the `withScopes()` method grant your application different access levels to your user's data. Some scopes provide read-only access while others also provide write access to their data. Read the API's documentation and decide which scopes your application requires.

When using the `gwt-oauth2` implementation (the default), call the `login()` method to display a pop-up that asks your user to grant access to their data. If they grant access, the callback's `onSuccess()` method is invoked with the access token generated by the auth provider. Once you have this token, you then need to pass it to the transport:

{{{
private void initialize(String accessToken) {
  new ClientGoogleApiRequestTransport()
      .setApplicationName(APPLICATION_NAME)
      .setAccessToken(accessToken) // <---------------------- add this line
      .create(new Receiver<GoogleApiRequestTransport>() {
        @Override
        public void onSuccess(GoogleApiRequestTransport transport) {
          // Same as above.
        }
      })
      .fire();
}
}}}

Note the absence of the call to `setApiAccessKey()` in the above sample. If you provide an access token, you should not also provide an API key. The access token uniquely identifies your application, and so the API key is an unnecessary addition.

==Next Steps==
You should now have the basics of using the URL Shortener API in your GWT application. The concepts learned in this guide apply to all new Google API libraries.

To find out more about what you can do with a specific service, see the the library's specific API reference, or check out some [GoogleAPIsSamples sample applications].