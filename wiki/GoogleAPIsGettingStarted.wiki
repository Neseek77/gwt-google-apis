#summary Using Google APIs in a project

*Note: This document is not specific to one service, but rather describes the setup and usage of any of the new Google APIs (e.g., Buzz, Moderator, Latitude, etc.)*

= Getting Started with Using Google APIs =

This guide describes the basics of using Google APIs in a GWT project. For more information on the functionality provided by a specific API service, see the specific API's developer's guide.

== Assumptions ==
 
  * You are already familiar with [http://code.google.com/webtoolkit/overview.html Google Web Toolkit]
  * You know how to [http://code.google.com/eclipse/docs/creating_new_webapp.html create a new GWT project] using the Google Plugin for Eclipse.
  * You are using GWT 2.3 or later.

== Downloading a service-specific Google API library ==

You can download the latest release of the library from the [http://code.google.com/p/gwt-google-apis/downloads/ project download page].

You can either reference the `.jar` file from the folder that you uncompressed the project in, or copy it to another location, such as the location of your GWT distribution (containing `gwt-dev.jar` and `gwt-user.jar` files).

== Creating a new GWT Project ==

Start by creating a new GWT project as described in the [http://code.google.com/eclipse/docs/creating_new_webapp.html GWT Plugin Guide].

Since we are working with an additional library, add the jar you just downloaded to the Java classpath.  Then, add the GWT module to your project's module by adding a line like this to your project's gwt.xml file:

{{{
<inherits name='com.google.api.gwt.services.Service' />
}}}

The `Service` you use will depend on the service with which you want to communicate. For example, if you want to communicate with the Buzz API, add this line to your gwt.xml file:

{{{
<inherits name='com.google.api.gwt.services.Buzz' />
}}}

To use the Moderator API instead, the module is `Moderator`, for the Translate it is `Translate`, and so on.

== Basic steps to use the service ==

Now that your project has the code it needs to make requests to the service, there are a couple things you need to do to enable requests.

=== Initialize the GoogleApiRequestTransport ===

Before making a request, the transport must be initialized. To do this (using the Buzz service as an example), write code like this:

{{{
// e.g., Buzz.class, Translate.class, Moderator.class...
private Service service = GWT.create(Service.class);

private void initialize() {
  new ClientGoogleApiRequestTransport()
      .setApiAccessKey(YOUR_API_KEY)
      .setApplicationName(YOUR_APPLICATION_NAME)
      .create(new Receiver<GoogleApiRequestTransport>() {
        @Override
        public void onSuccess(GoogleApiRequestTransport transport) {
          service.initialize(eventBus, transport);

          // Now that your service is initialized, you can make a request.
          // It may be better to publish a "ready" event on the eventBus
          // and listen for it to make requests elsewhere in your code.
          makeRequest();
        }

        @Override
        public void onFailure(ServerFailure error) {
          Window.alert("Failed to initialize Transport");
        }
      });
}
}}}

This code snippet sets up the service so that it can make requests. It sets your API key (which is available at the [http://code.google.com/apis/console Google APIs Console]), your application's name, and by initializing it with the service in question.

=== Make Requests to the Service ===

The specifics of making a request will be different depending on the service with which you are communicating, but the basics are similar, and will generally look something like this:

{{{
private void makeRequest() {
  service.collection().method("requiredParam", "reqParam2")
      .setOptionalParam("optionalParam")
      .to(new Receiver<Response>() {
        @Override
        public void onSuccess(Response response) {
          // handle response...
        }
      })
      .fire();
}
}}}

This code snippet uses the same `service` instance described earlier, which was instantiated by a call to `GWT.create(Service.class)`.

As a specific example, the Buzz service provides a method to list activities posted by a user. The code to make a request to this method would look something like this:

{{{
private void makeRequest() {
  buzz.activities().list("@me", Scope.SELF)
      .setMaxResults(5)
      .to(new Receiver<ActivityFeed>() {
        @Override
        public void onSuccess(ActivityFeed response) {
          Window.alert("There are " + response.getItems().size() + " items");
        }
      })
      .fire();
}
}}}

This method makes a request for at most 5 activities, then `alert()`s with the number of items retrieved (usually 5).

== Adding Authentication ==

Some methods require the user of your application to authenticate, and to grant access to their data to your application. This can be accomplished using [http://TODO OAuth 2.0].

You will need to ask your users for access to their data before making any requests. In fact, you will need to do this before initializing the transport. All requests made using the transport will use the access token your application receives as a result of the OAuth 2.0 flow.

To initiate an OAuth 2.0 flow, you will use an `OAuth2Login` implementation. The implementation provided with the library is `ClientOAuth2Login`, which delegates to the [http://code.google.com/p/gwt-oauth2 gwt-oauth2] project under the covers to handle the flow.

{{{
private void authenticate() {
  new ClientOAuth2Login(CLIENT_ID)
      .withScopes(Service.ServiceAuthScope.SOME_AUTH_SCOPE) // e.g., BuzzAuthScope, ModeratorAuthScope, etc.
      .login(new Receiver<String>() {
        @Override
        public void onSuccess(String accessToken) {
          initialize(accessToken);
        }
      });
}
}}}

Replace `Service.ServiceAuthScope` with one or more auth scope enums included in your service's library, e.g., `Buzz.BuzzAuthScope.BUZZ_READ_ONLY` or `Urlshortener.UrlshortenerAuthScope.URLSHORTENER`.

The scopes provided to the `withScopes()` method will grant your application different access levels to your user's data. Some scopes provide read-only access while others also provide write access to their data. You will need to read the API's documentation to find out which scopes your application will require.

When using the `gwt-oauth2` implementation, calling the `login()` method will display a pop-up to your user which will ask them to grant access to their data. If they grant access, the callback's `onSuccess()` method will be called with the access token generated by the auth provider. Once you have this token, you will then need to pass it to the transport:

{{{
private void initialize(String accessToken) {
  new ClientGoogleApiRequestTransport()
      .setApiAccessKey(API_KEY)
      .setApplicationName(APPLICATION_NAME)
      .setAccessToken(accessToken) // <---------------------- add this line
      .create(new Receiver<GoogleApiRequestTransport>() {
        @Override
        public void onSuccess(GoogleApiRequestTransport transport) {
          // Same as above.
        }
      })
      .fire();
}
}}}

==Next Steps==
You should now have the basics of using a Google API in your GWT application.

To find out more about what you can do with a specific API, see the [http://TODO library class reference].