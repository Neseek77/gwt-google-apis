#summary Adding Google APIs to a GWT Project using the gwt-google-apis .jar files.

= Introduction  =

This guide assumes you are already familiar with using the Google Web Toolkit.  See the [http://code.google.com/webtoolkit/overview.html GWT Documentation] to learn how to create a new GWT project.  Make sure you are familiar with the  `applicationCreator` tool to help create new projects and to integrate your project with the Eclipse IDE.  

= Using a library or source code =

When you develop code with the GWT Google APIs you have two choices.  You can either use the library from a JAR file, or you can use the library by pointing to a source tree, usually a current version of the library checked out from the Subversion repository.  Which method you choose depends on your development needs.

The production version of the GWT Google APIs is distributed as a
`.jar` file that is easy to integrate with an existing GWT project.
Choose the `.jar` file library if you need a stable release of the
library and do not have a need for a specific pre-release feature.

The latest version of the API source code is also publicly available
from a [http://subversion.tigris.org/ Subversion] repository hosted by
[http://code.google.com/ Google Code].  Choose the source code if you
need to use the latest features and bug fixes by the library, or if
you are interested in contributing patches to the library.  See the instructions for  [GettingStartedSource getting started using the gwt-google-apis source code]  if you wish to go this route.


= Adding Google APIs to a GWT Project as a library =

This section describes how to integrate one of the `gwt-google-apis` JAR files library
with an existing GWT project.  In this case, we are going to use the `gwt-maps.jar` library as an example.

== Getting the GWT Google APIs gwt-maps library ==

You can download the latest production release of the GWT Google APIs library from the [http://code.google.com/p/gwt-google-apis/downloads/list project download page].  Choose the _All Downloads_ option to see milestone releases as well as final releases.
After you download the distribution, uncompress
it.  Inside the folder you will find a .jar file named after the name of the library (e.g.
`gwt-maps.jar`). 

You can either reference the `.jar` file from the folder that you uncompressed the project in, or copy it to another location, such as the location of your GWT distribution (containing `gwt-dev-`_<machine>_`.jar` and `gwt-user.jar` files).  In this example, we've chosen to copy the file to the path `/usr/local/gwt-maps`.

  _Note: Some releases are marked 'deprecated' by the Google Code download tab,
even though they are more recent than older versions.  When we create milestone versions, we mark them in this way just to keep unsuspecting users from grabbing a potentially unstable version._

== Creating your project ==

Start by creating a new GWT project. This example uses the `applicationCreator` tool.  It would be easiest to start with this tool because it sets up all the classpaths for you. Create a sample with this tool, then, if you want to add the API to another project, you can compare the differences in the project files generated by the tool.

== Updating <project>-compile and <project>-shell ==

First, create a project with `projectCreator` and `applicationCreator` as shown in the [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(GettingStarted) GWT Getting Started tutorial] and the [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(DevGuideDeveloperGuide) Developer Guide].  In the following example, the GWT Google API jar file `gwt-maps.jar` has been unpacked in `/usr/local/gwt-maps`

{{{
$PP_OFF
$ projectCreator -eclipse MapsTutorial -out MapsTutorial \
     -addToClassPath /usr/local/gwt-maps/gwt-maps.jar 
Created directory MapsTutorial/src
Created directory MapsTutorial/test
Created file MapsTutorial/.project
Created file MapsTutorial/.classpath

$ applicationCreator -eclipse MapsTutorial -out MapsTutorial \
     -addToClassPath /usr/local/gwt-maps/gwt-maps.jar \
     -addModule com.google.gwt.maps.GoogleMaps \
     com.example.google.gwt.mapstutorial.client.MapsTutorial 
Created directory MapsTutorial/src/com/example/google/gwt/mapstutorial
Created directory MapsTutorial/src/com/example/google/gwt/mapstutorial/client
Created directory MapsTutorial/src/com/example/google/gwt/mapstutorial/public
Created file MapsTutorial/src/com/example/google/gwt/mapstutorial/MapsTutorial.gwt.xml
Created file MapsTutorial/src/com/example/google/gwt/mapstutorial/public/MapsTutorial.html
Created file MapsTutorial/src/com/example/google/gwt/mapstutorial/client/MapsTutorial.java
Created file MapsTutorial/MapsTutorial-shell
Created file MapsTutorial/MapsTutorial-compile
}}}

This command sets up a standard project, plus adds the library `/usr/local/gwt-maps/gwt-maps.jar` to the Java classpath for the launch, compile and .and eclipse definitions.


Test to see that hosted mode and web mode work by running the `MapsTutorial-shell` script.  You should see the skeleton project come up:

  http://gwt-google-apis.googlecode.com/svn/wiki/GettingStartedBasic1.png

Also try out the `MapsTutorial-compile` script:

{{{
$PP_OFF
$ ./MapsTutorial-compile
Compiling into ./www/com.example.google.gwt.mapstutorial.MapsTutorial
Copying all files found on public path
Compilation succeeded
}}}


= Creating a Small Project using the Google Maps API =

Before continuing, make sure you can launch the skeleton project in hosted mode by either running _!MapsTutorial-shell_ from the command line or using the _Run_ configuration from Eclipse.  Make sure you test the _Compile/Browse_ button in hosted mode as well.  If you encounter any problems, read back over the previous instructions.  If you still need help, try searching and/or posting to the Google-Web-Toolkit group.

== Modify !MapsTutorial.gwt.xml ==

Since this example will use the Google Maps API, we need to modify the default `MapsTutorial.gwt.xml` file in two ways:

  1 Add an `<inherits>` entry to pull in the GWT Google APIs module for Google Maps.
  1 Add a reference to the Google Maps !JavaScript API.  

Note that in order to use the Maps API, you need to apply for a Google Maps API key.  Running with no key specified will work with `localhost` for development purposes, but you will need to apply for your own key to deploy to a website.

{{{
 <!-- Load the Google Maps GWT bindings from the gwt-google-apis project -->
 <!-- Added by projectCreator if you use the -addModule argument -->
 <inherits name="com.google.gwt.maps.GoogleMaps" />

 <!--
    If you want to deploy this application outside of localhost,
    you must obtain a Google Maps API key at:
    http://www.google.com/apis/maps/signup.html
    Replace the src attribute below with a URL that contains your key.
  -->
 <!-- script src="http://maps.google.com/maps?gwt=1&amp;file=api&amp;v=2.x&amp;key=???" /-->

 <!-- You can run under localhost without a key -->
 <script src="http://maps.google.com/maps?gwt=1&amp;file=api&amp;v=2.x" />

}}}

== Update the HTML host file ==

Replace the body of the HTML host file `com/example/google/gwt/mapstutorial/public/MapsTutorial.html` with a `<div>` tag that we can use for the GWT application.

{{{
<body>

    <h1>MapsTutorial</h1>

    <div id="mapsTutorial">

</body>
}}}

== Add a map object to .java source ==

To complete the `MapsTutorial.java` file, add some imports, a member to store a `MapWidget` instance, and replace the body of the `onModuleLoad()` method. 

{{{
package com.example.google.gwt.mapstutorial.client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.maps.client.InfoWindowContent;
import com.google.gwt.maps.client.MapWidget;
import com.google.gwt.maps.client.control.LargeMapControl;
import com.google.gwt.maps.client.geom.LatLng;
import com.google.gwt.user.client.ui.RootPanel;

public class MapsTutorial implements EntryPoint {
  private MapWidget map;

  // GWT module entry point method.
  public void onModuleLoad() {

    // Open a map centered on Cawker City, KS USA
    map = new MapWidget(new LatLng(39.509,-98.434), 2);
    map.setSize("500px", "300px");
    
    // Add some controls for the zoom level
    map.addControl(new LargeMapControl());
    
    // Add an info window to highlight a point of interest
    map.getInfoWindow().open(map.getCenter(), 
        new InfoWindowContent("World's Largest Ball of Twine"));
    
    // Add the map to the HTML host page
    RootPanel.get("mapsTutorial").add(map);
  }
}
}}}


== Run the !MapsTutorial sample project ==

Now, you should be able to execute your sample project in hosted mode by  launch the skeleton project in hosted mode by either running _!MapsTutorial-shell_ from the command line or using the _Run_ configuration from Eclipse.  

  http://gwt-google-apis.googlecode.com/svn/wiki/GettingStartedBasic5.png

If you would like to see your project in your host's web browser (web mode), press the _Compile/Browse_ button in hosted mode.