#summary How to write and debug a Gadget using GWT

= Getting Started with Gadgets and GWT =

The Gadget Library for GWT simplifies gadget development by automatically generating a [http://code.google.com/apis/gadgets/docs/legacy/reference.html#XML_Ref Gadget Specification] from Java source, inserting a selection script in the specification much like a regular GWT project.  After compiling your gadget with GWT, all files are in place to [http://code.google.com/apis/gadgets/docs/legacy/publish.html publish] your gadget.

Please note that the Gadget Library currently only supports the legacy Gadgets API based on the _IG_... namespace.

This guide will get you started writing your first Gadget.  Before you start, make sure you are familiar with [http://www.google.com/ig iGoogle] and the [http://code.google.com/apis/gadgets/docs/legacy/dev_guide.html Gadgets developer site].


== Assumptions ==
 
  * You are already familiar with [http://code.google.com/webtoolkit/overview.html Google Web Toolkit]
  * You know how to [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(GettingStartedCreateProject) create a new GWT project] and import it into the Eclipse IDE environment using the `projectCreator` and `applicationCreator` tools


== Downloading the Gadget Library for GWT ==

You can download the latest release of the library from the [http://code.google.com/p/gwt-google-apis/downloads/ project download page]. After you download the distribution, uncompress it.  Inside the folder you will find a .jar file named `gwt-gadgets.jar`. 

You can either reference the `.jar` file from the folder that you uncompressed the project in, or copy it to another location, such as the location of your GWT distribution (containing `gwt-dev-`_<machine>_`.jar` and `gwt-user.jar` files).  In this example, we've chosen to copy the file to the path `/usr/local/gadgets`.

== Differences between a standard GWT project and a GWT Gadget project==

Look at the sample program _Hello Gadgets_ that ships with the `gwt-gadgets` distribution

   [http://code.google.com/p/gwt-google-apis/source/browse/trunk/gadgets/samples/hellogadgets/src/com/google/gwt/gadgets/sample/hellogadgets/client/HelloGadgets.java HelloGadgets.java]

There are some differences you will notice from a standard GWT project.

  # There is no class that implements the [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/client/EntryPoint.html EntryPoint] interface.
  # The entry point class is a subclass of [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/Gadget.html Gadget].
  # There is an `@ModulePrefs` annotation on the class
  # There is a relationship between the [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/Gadget.html Gadget] subclass and the [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/UserPreferences.html UserPreferences] subclass named `HelloPreferences`.


These differences derive from the fact that a Gadget must adhere to a specific framework as described in the [http://code.google.com/apis/gadgets/docs/legacy/dev_guide.html Google Gadget developer's documentation].  To meet this requirement, Gadget support is implemented using a custom [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/ext/Linker.html GWT Linker]. 

== Creating a new GWT Project ==

Start by creating a new GWT project called !SimpleGadget as described in the [http://code.google.com/docreader/#p(google-web-toolkit-doc-1-5)s(google-web-toolkit-doc-1-5)t(GettingStarted) GWT Getting Started Guide]. 

Since we are working with an additional library, we use the command line argument `-addToClassPath` which adds the library `/usr/local/gadgets/gwt-gadgets.jar` to the Java classpath for the launch, compile and and eclipse definitions. For the purposes of this example we assume `gwt-gadgets.jar` has been unpacked in `/usr/local/gadgets` and that you are using the Eclipse IDE.

We also need to tell the GWT compiler that we are using the Gadgets module. To do this, we use the command line argument `-addToModule` and specify `com.google.gwt.gadgets.Gadgets` as the module to be inherited. This will place the inheritance entry `Gadgets.gwt.xml` into the generated project file `SimpleGadget.gwt.xml`.


{{{
$PP_OFF
$ projectCreator -eclipse SimpleGadget -out SimpleGadget \
     -addToClassPath /usr/local/gadgets/gwt-gadgets.jar


$ applicationCreator -eclipse SimpleGadget -out SimpleGadget \
     -addToClassPath /usr/local/gadgets/gwt-gadgets.jar \
     -addModule com.google.gwt.gadgets.Gadgets com.example.simplegadget.client.SimpleGadget
}}}


Now you should now have a standard GWT project set up (though nothing Gadget related other than the library inclusion). Before continuing, make sure you can launch the skeleton project in hosted mode by running _!SimpleSearch-shell_ from the command line. 

If you are using the Eclipse IDE, now would be a good time to import your new project into Eclipse using the `File --> Import...` command.

=== Modify the Project ===

Start by opening up `SimpleGadget.java` and changing the class declaration to read:

{{{
   public class SimpleGadget extends Gadget<UserPreferences> 
}}}

Remove the `onModuleStart()` method.  No constructor is necessary.

Next, you need to implement the `init(UserPreferences)` method from the `Gadget` class.  This sample implements a very simple body for the Gadget.

{{{
  @Override
  protected void init(UserPreferences preferences) {
    Button simpleButton = new Button("SimpleGadget");
    simpleButton.addClickListener(new ClickListener() {
      public void onClick(Widget sender) {
        Window.alert("Hello World!");
      }
    });
    RootPanel.get().add(simpleButton);
  }
}}}


Finally, above the class statement, add an annotation to set the gadget title, author and email:

{{{
@ModulePrefs(title = "SimpleGadget", author = "yournamehere", author_email = "yournamehere@gmail.com")
}}}

[http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/Gadget.ModulePrefs.html @ModulePrefs] provides attributes to the [http://code.google.com/apis/gadgets/docs/legacy/reference.html#Moduleprefs_Ref  `<ModulePrefs>`] tag in the Gadget Specification.


=== Specifying Features ===

If the Gadget requires access to features of the container, it should implement any of the _!NeedsFoo_ interfaces, which currently include:
 
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/NeedsAnalytics.html NeedsAnalytics]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/NeedsDynamicHeight.html NeedsDynamicHeight]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/NeedsIntrinsics.html NeedsIntrinsics]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/NeedsSetPrefs.html NeedsSetPrefs]
  * [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/NeedsSetTitle.html NeedsSetTitle]


At runtime, all feature setters will be called strictly before [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/Gadget.html#init(T) init(UserPreferences)]. The order in which the setters are called is undefined.


For example, if you wanted to use the optional feature to set the title dynamically, you would need to inherit the `NeedsSetTitle` interface.

{{{
/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
@ModulePrefs(title="Original Title", author = "yournamehere", author_email = "yournamehere@gmail.com")
public class NeedsSetTitleGadget extends Gadget<UserPreferences> implements
    NeedsSetTitle {
  int titleIndex = 0;
  String[] titles = { "NeedsTitle Example", "Hello World!","Goodbye World!"};
  SetTitleFeature titleFeature;

  @Override
  protected void init(UserPreferences preferences) {
    Button changeTitleButton = new Button("Change Title");
    changeTitleButton.addClickListener(new ClickListener () {

      public void onClick(Widget sender) {
        titleFeature.setTitle(titles[titleIndex++ % titles.length]);
      }
      
    });
   RootPanel.get().add(changeTitleButton);
  }

  public void initializeFeature(SetTitleFeature feature) {
    this.titleFeature = feature;
  }
}
}}}

And here is a screenshot of the resulting gadget:

   [http://gwt-google-apis.googlecode.com/svn/wiki/GettingStartedGadgets-ChangeTitle.png]


=== Specifying Preferences ===

The gadget spec allows you to specify user preferences for your gadget.  User preferences allow the gadget container to provide a user interface and storage for parameters used to customize the gadget. 

In GWT, access to user preferences is provided through a user-defined subtype of the [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/UserPreferences.html UserPreferences] interface. Each preference should be defined as a zero-argument method, returning the desired type of [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/UserPreferences.Preference.html UserPreferences.Preference Preference]. The Gadget type should be parameterized with the specific [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/UserPreferences.html UserPreferences] subtype, which will be provided to the [http://gwt-google-apis.googlecode.com/svn/javadoc/gadgets/1.0/com/google/gwt/gadgets/client/Gadget.html#init(T) init(UserPreferences)] method. 


The following sample code shows how to implement a simple checkbox type of preference.  In this sample, the gadget displays a different menu depending on whether the user checks the _Vegetarian_ checkbox.  First, the custom `UserPreference` subclass:

{{{
import com.google.gwt.gadgets.client.BooleanPreference;
import com.google.gwt.gadgets.client.UserPreferences;

public interface MealPreferences extends UserPreferences {

  @PreferenceAttributes(display_name = "Vegetarian", default_value = "false")
  BooleanPreference noMeat();

}
}}}

Next, a `Gadget` class that uses the `MealPreferences` class.  The meal choices are displayed in a table - when the user selects a dish, an alert window is opened.

{{{
import com.google.gwt.gadgets.client.Gadget;
import com.google.gwt.gadgets.client.Gadget.ModulePrefs;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.CheckBox;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.Panel;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
@ModulePrefs(title = "MealPreferences Gadget", author = "yournamehere", author_email = "yournamehere@gmail.com")
public class MealPreferencesGadget extends Gadget<MealPreferences> {

  private String[] meatEntrees = {
      "steak kabobs", "lamb fricassee", "chicken kiev"};
  private String[] vegEntrees = {"saag paneer", "baba ganoush", "boca burger"};
  private String[] dishes;

  @Override
  protected void init(MealPreferences preferences) {
    initDishes(preferences);

    // Create a table with a checklist of all available dishes based on the
    // user's dietary preferences.
    Panel p = new VerticalPanel();
    p.setWidth("100%");

    FlexTable ft = new FlexTable();

    int index = 0;
    for (String dish : dishes) {
      CheckBox cb = new CheckBox();
      final String dishCopy = dish;
      cb.addClickListener(new ClickListener() {
        public void onClick(Widget sender) {
          Window.alert("Your order of " + dishCopy + " will be right up.");
        }
      });
      ft.setWidget(index, 0, cb);
      ft.setHTML(index, 1, dish);
      index++;
    }
    p.add(ft);
    RootPanel.get().add(p);
  }

  private void initDishes(MealPreferences preferences) {
    // Customize the list of dishes to the dining preferences of the user.
    if (preferences.noMeat().getValue().booleanValue()) {
      dishes = vegEntrees;
    } else {
      dishes = meatEntrees;
    }
  }
}
}}}


Here is a screen shot of the resulting gadget's preferences menu in iGoogle:

   [http://gwt-google-apis.googlecode.com/svn/wiki/GettingStartedGadgets-MealPreferences.png]

=== Compiling your Gadget ===

Use the SampleGadget-compile shell script to build your project, or use any other method to invoke the GWT compiler on the module `SampleGadget.gwt.xml`.

The output of the compiler will have:
   * Several `.cache.js` files, one per compiler permutation.  These contain the application logic for your gadget compiled for each browser/locale combination.
   * A `SampleGadgets.html` file.  This is just a holdover from a regular GWT module and is not used in publishing a gadget (but it can be useful in hosted mode).  
   * Other resources such as image files.
   * A `*.xml` file.  This is the gadget specification file that you will need in order to [http://code.google.com/apis/gadgets/docs/legacy/publish.html publish your gadget].  It contains:
       * Information about your gadget specified in `@ModulePrefs` 
       * Which features your gadget needs, 
       * A user preference value specification, 
       * Some !JavaScript code for initializing the Gadget API and loading one of the compiler permutations.

== Uploading and Syndicating your Gadget ==

First, you should take the output files from the compiler and upload them all to the same directory on a web server.

For debugging your gadget, register the URL for your gadget spec file (the `.gadget.xml` file created when you compile in the place it has been uploaded to) using Syndication.  See [http://code.google.com/apis/gadgets/docs/legacy/publish.html#Syndication Publishing Using Syndication] or search for the Syndication gadget in the iGoogle content directory.  After the URL is registered, you can add it to your iGoogle page, or create a simple host web page using the 'Get the Code' button.

Once your debugging is complete, you can list your gadget in the [http://code.google.com/apis/gadgets/docs/legacy/publish.html#Syndication content directory]. 

== Debugging your Gadget in Hosted Mode ==

The debugging setup for a gadget is a bit more complicated than the usual GWT hosted mode setup.  The complexities have to do with the public nature of gadgets being served from a gadget container, and caching of the Gadget Spec by the gadget container.

=== Bringing up Hosted Mode with -noserver ===

Here are the steps to debug your gadget code in Hosted mode:

   1 Compile your gadget.  You can do this by running your gadget in hosted mode and pressing the 'Compile/Browse' button or by invoking the compiler from the command line.  If you followed the instructions above, you should have a shell script named `SimpleGadget-compile`.
   1 Upload the files output from the compiler a webserver.  
   1 Publish your gadget (using [http://code.google.com/apis/gadgets/docs/legacy/publish.html#Syndication Syndication] is the easiest way)
   1 Add your gadget to your [http://www.google.com/ig iGoogle] home page.
   1 Start up hosted mode with the "-noserver" argument.  You can add this argument in to your IDE launch config, or edit `SimpleGadget-shell` and insert the `-noserver` argument after `com.google.gwt.dev.GWTShell`. 
   1 Type the url `http://www.google.com/igoogle` into the hosted mode browser url window.

Now your gadget client code is running in hosted mode.  

  _Note: for pre gwt-gadgets 1.1_RC1 releases, you may need to edit your eclipse project configuration for the gwt-gadgets and/or your launch configurations to reference the library `GWT_TOOLS/lib/xerces/xerces-2_9_1/xercesImpl.jar`_

  _Note: It is normal to see the following error when debugging a gadget in hosted mode:
{{{
[ERROR] Unable to load module entry point class com.google.gwt.gadgets.sample.hellogadgets.client.HelloGadgets (see associated exception for details)
java.lang.RuntimeException: Failed to invoke native method: fireOnModuleLoadStart with 1 arguments.
	at com.google.gwt.dev.shell.moz.LowLevelMoz.invoke(LowLevelMoz.java:132)
	at com.google.gwt.dev.shell.moz.ModuleSpaceMoz.doInvoke(ModuleSpaceMoz.java:98)
	at com.google.gwt.dev.shell.ModuleSpace.invokeNative(ModuleSpace.java:434)
        ...
}}}
  This is because there is no entry point in the module to run._

=== Making changes to and debugging your Java source ===

You can make changes to your Java code and use the `Refresh` button on the hosted mode browser to see your changes.  If you would like to use the Java debugger, you can repeat the launch of hosted mode using a Java debugger (or launch the hosted mode shell from your IDE with the debugging setup.)

=== Caching effects from the Gadget Container ===

One important aspect of the Gadget infrastructure you must be aware of is that Gadget containers, such as iGoogle, are free to cache the Gadget specifications.  In the case of iGoogle, the default caching is one hour.  See FAQ item [http://code.google.com/apis/gadgets/faq.html#CantSeeChanges I updated my gadget, but I can't see my changes. What's going on?]  

As a developer, you can use the [http://code.google.com/apis/gadgets/docs/legacy/tools.html#Dev_Gadget Developer Gadget] on iGoogle to turn off caching for your view of the gadget by un-checking the `Cached` checkbox beside the URL of your Gadget Spec.

For deploying a gadget developed with GWT, the caching by Gadget Containers is a significant issue. If you deploy your GWT application and remove old versions of the compiled program, the cached version of the Gadget spec will still refer to the old (and now deleted) files and end users will experience an outage until the cache is refreshed.  

== Using Eclipse ==

The `projectCreator` task creates an eclipe configuration file to import into your Ecilpse workspace.  

Use the `File-->Import...` command to navigate to the directory where you created the project and import it into the workspace.  Once the project is imported, you will see that the following items have been configured for you:

   * A classpath that contains the `gwt-gadgets.jar` file.
   * A launch configuration that contains the source directory for your project on your class path.