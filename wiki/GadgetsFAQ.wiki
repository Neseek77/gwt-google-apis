#summary Frequently Asked Questions about the GWT bindings for gadgets

= Gadgets  FAQs =

These FAQs refer to the Google API Library for GWT bindings for the gadgets API.  See also [Overview Project Overview] for general information on the Google API Libraries for GWT.


== Why doesn't the sample work in hosted mode? ==

A Gadget must be hosted in a Gadget container (such as iGoogle or Apache Shindig) before it can be run in hosted mode.  See [GadgetsGettingStarted Getting Started with Gadgets].

== How can I get GWT RPC to work in a Gadget? ==

The gwt-gadgets library creates what is called an 'inline' gadget, which puts the implementation of your gadget into the gadget spec file.  While this is a boon to performance, the gadget container now becomes the origin of your application, meaning that you must use a proxy to access resources on other hosts. 

For RPC to work, you must first, you will need to modify the client to use the proxy provided by the gadget container:

{{{
    gadgetService = GWT.create(GadgetService.class);
    // Work around the Single Origin Policy(SOP) when the gadget is hosted
    // inside the gadget spec.
    ServiceDefTarget serviceDef = (ServiceDefTarget) gadgetService;
    String rpcUrl = serviceDef.getServiceEntryPoint();
    rpcUrl = intrinsicMethods.getCachedUrl(rpcUrl);
    serviceDef.setServiceEntryPoint(rpcUrl);
}}}

Then, on the server side of the connection, there is a second problem to address.  By default in GWT 1.5, the servlet checks for a content type of `text/x-gwt-rpc`.  Unfortunately, the iGoogle proxy re-writes this header.  To workaround this problem, GWT 1.5.2 and later provides a method that gives the developer some control over this checking:

{{{
  // Default implemention of RemoteServiceServlet.readContent(HttpServletRequest)
  protected String readContent(HttpServletRequest request)
      throws ServletException, IOException {
    return RPCServletUtils.readContentAsUtf8(request, true);
  }
}}}

For a gadget, override this method in your implementation of `RemoteServiceServlet` and implement it as:

{{{
  protected String readContent(HttpServletRequest request)
      throws ServletException, IOException {
    return RPCServletUtils.readContentAsUtf8(request, false);
  }
}}}
